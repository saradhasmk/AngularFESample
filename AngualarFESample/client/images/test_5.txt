package com.planetsoft.picp.hierarchy.data.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.StringTokenizer;

import com.lowagie.text.pdf.hyphenation.TernaryTree.Iterator;
import com.planetsoft.drs.utilities.CommonUtils;
import com.planetsoft.drs.utilities.IConstants;
import com.planetsoft.drs.utilities.IDBConstants;
import com.planetsoft.drs.utilities.IHierarchyQueries;
import com.planetsoft.drs.utilities.ILogger;
import com.planetsoft.drs.utilities.LogManager;
import com.planetsoft.drs.utilities.PSSException;
import com.planetsoft.picp.common.data.dao.CommonDAO;
import com.planetsoft.picp.common.data.dto.PartyContextDTO;
import com.planetsoft.picp.common.data.vo.UserContextVO;
import com.planetsoft.picp.hierarchy.data.dto.HierLineOfBusinessDTO;
import com.tpp.components.util.classes.BaseDAO;
import com.tpp.components.util.classes.BaseDAOException;

public class HierLineOfBusinessDAO extends BaseDAO {

	ILogger LogUtil = LogManager.getInstance();

	private static final String STRCLASSNAME = "HierLineOfBusinessDAO";
	private static com.pi.fwk.util.ILogger reallocLogUtil = com.pi.fwk.util.LogManager.getInstance("realloc");

	 public String saveCALineOfBusiness(HierLineOfBusinessDTO objHierLineOfBusinessDTO,PartyContextDTO objPartyContextDTO,UserContextVO objUserContextVO) throws PSSException {
			final String STRMETHODNAME = "saveCALineOfBusiness";
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
			String message=null;
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;	
			ArrayList lobList=new ArrayList();		
			
			try {		  
  			objConnection = getDbConnection();	
  			StringTokenizer str1=new StringTokenizer(objHierLineOfBusinessDTO.getMappedColumns(),",");
  			while(str1.hasMoreElements()){
  				StringTokenizer str2=new StringTokenizer(str1.nextElement().toString(),"~");
  				while(str2.hasMoreElements()){
  				    //lobList = new ArrayList();
  					lobList.add(str2.nextElement().toString());
  				}
  				if(lobList.size()>0){
  					int caInsurerId = super.getMaxId(IDBConstants.CA_INSURER_DETAILS);
  					objPStmt = objConnection.prepareStatement(IHierarchyQueries.INSERT_CA_LINE_OF_BUSINESS);
  					objPStmt.setInt(1,caInsurerId);
  					objPStmt.setString(2,objPartyContextDTO.getPartyId());
  					objPStmt.setString(3,lobList.get(0).toString());
  					objPStmt.setString(4,lobList.get(1).toString());
  					if(lobList.get(2).toString()==null){
							objPStmt.setNull(5, java.sql.Types.DATE);
						}
						else{
							objPStmt.setDate(5, CommonUtils.getSqlDate(lobList.get(2).toString()));							
						}     				
  					objPStmt.setString(6,lobList.get(3).toString());     					
  					objPStmt.setTimestamp(7,CommonUtils.getCurrentTimeStamp());
  					objPStmt.setString(8, objUserContextVO.getUserId());
  					int rowInserted = objPStmt.executeUpdate();
  					message=rowInserted==0?"Failure":"success";	
  				}
  				lobList.clear();
  			}
  			if(objHierLineOfBusinessDTO.getUpdateColumns()!=null && !objHierLineOfBusinessDTO.getUpdateColumns().equals("")){
  			if(objHierLineOfBusinessDTO.getUpdateColumns().length()>0){
  				message=updateCALineOfBusiness(objHierLineOfBusinessDTO,objPartyContextDTO,objUserContextVO);	
  			}
  			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, ""," Inserting RACPC into The BANCA_BRANCH_NAME_HISTORY Table :::");
		
		
			
			//LogUtil.debug(STRCLASSNAME, STRMETHODNAME, ""," NO OF ROWS INSERTED IN TO  BANCA_BRANCH_NAME_HISTORY Table IS:::"+ rowInserted);
				
			
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException" + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
				
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
			return message;
			
		}
	 
	 public String updateCALineOfBusiness(HierLineOfBusinessDTO objHierLineOfBusinessDTO,PartyContextDTO objPartyContextDTO,UserContextVO objUserContextVO) throws PSSException {
			final String STRMETHODNAME = "saveCALineOfBusiness";
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
			String message=null;
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;	
			ArrayList lobList=new ArrayList();		
			
			try {		  
			objConnection = getDbConnection();
			StringTokenizer str1=new StringTokenizer(objHierLineOfBusinessDTO.getUpdateColumns(),",");
			while(str1.hasMoreElements()){
				StringTokenizer str2=new StringTokenizer(str1.nextElement().toString(),"~");
				while(str2.hasMoreElements()){
				    //lobList = new ArrayList();
					lobList.add(str2.nextElement().toString());
				}
				if(lobList.size()>0){
					objPStmt = objConnection.prepareStatement(IHierarchyQueries.UPDATE_CA_LINE_OF_BUSINESS);
					objPStmt.setString(1,lobList.get(1).toString());
					objPStmt.setString(2,lobList.get(2).toString());  
					
					if(lobList.get(3).toString()==null){
						objPStmt.setNull(3, java.sql.Types.DATE);
					}
					else{
						objPStmt.setDate(3, CommonUtils.getSqlDate(lobList.get(3).toString()));							
					}  
					objPStmt.setString(4,lobList.get(4).toString());
					objPStmt.setTimestamp(5,CommonUtils.getCurrentTimeStamp());
					objPStmt.setString(6, objUserContextVO.getUserId());
					objPStmt.setInt(7,Integer.parseInt(lobList.get(0).toString()));
					objPStmt.setString(8,objPartyContextDTO.getPartyId());  
					int rowInserted = objPStmt.executeUpdate();
					message=rowInserted==0?"Failure":"success";	
				}
				lobList.clear();
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, ""," Inserting RACPC into The BANCA_BRANCH_NAME_HISTORY Table :::");
		
		
			objPStmt.close();
			//LogUtil.debug(STRCLASSNAME, STRMETHODNAME, ""," NO OF ROWS INSERTED IN TO  BANCA_BRANCH_NAME_HISTORY Table IS:::"+ rowInserted);
				
			
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException" + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
				
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
			return message;
			
		}
	 
	 public ArrayList <HierLineOfBusinessDTO> readCALineOfBusinessDetails(HierLineOfBusinessDTO objHierLineOfBusinessDTO,PartyContextDTO objPartyContextDTO,UserContextVO objUserContextVO) throws PSSException, ParseException {
			final String STRMETHODNAME = "saveCALineOfBusiness";
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
			String message=null;
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;	
			ArrayList lobList=new ArrayList();	
			CommonDAO objCommonDAO=new CommonDAO();	
			ArrayList <HierLineOfBusinessDTO> objHierLineOfBusinessDTOList=new ArrayList<HierLineOfBusinessDTO>();
			try {		  
  			objConnection = getDbConnection();	 			
  					objPStmt = objConnection.prepareStatement(IHierarchyQueries.GET_CA_LINE_OF_BUSINESS_DETAILS);
  					objPStmt.setString(1,objPartyContextDTO.getPartyId());
  					objResultSet=objPStmt.executeQuery();
  					if(objResultSet!=null){
  						while(objResultSet.next()){
  							HierLineOfBusinessDTO tempHierLineOfBusinessDTO=new HierLineOfBusinessDTO();
  							tempHierLineOfBusinessDTO.setArrLob(objCommonDAO.getCALineOfBusinessLOB());
  	  						tempHierLineOfBusinessDTO.setArrStatus(objCommonDAO.getCALineOfBusinessStatus());
  							String tempId=Integer.toString(objResultSet.getInt(1));
  						tempHierLineOfBusinessDTO.setCALOBId(tempId);
  						tempHierLineOfBusinessDTO.setBusinessName(objResultSet.getString(2));  						   
  						tempHierLineOfBusinessDTO.setDateOfReg(objResultSet.getString(3));
  						tempHierLineOfBusinessDTO.setBusinessStatus(objResultSet.getString(4));
  						tempHierLineOfBusinessDTO.setLob(objResultSet.getString(5));  					
  						objHierLineOfBusinessDTOList.add(tempHierLineOfBusinessDTO);
  						}
  						
  					}
  			objPStmt.close();
				} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException" + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
				
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
			return objHierLineOfBusinessDTOList;
			
		}
	 
	  
	 public int getLOBCount(int lobType,PartyContextDTO objPartyContextDTO,UserContextVO objUserContextVO) throws PSSException {
			final String STRMETHODNAME = "getLOBCount";
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
			String message=null;
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;	
			int lobCount=0;
			boolean breakLoop=true;
			
			try {		  
			objConnection = getDbConnection();			
			objPStmt = objConnection.prepareStatement(IHierarchyQueries.GET_CA_LINE_OF_BUSINESS_COUNT);
			objPStmt.setInt(1,Integer.parseInt(objPartyContextDTO.getPartyId()));
			objPStmt.setInt(2,lobType);
			objResultSet=objPStmt.executeQuery();
			if(objResultSet!=null){
			while(objResultSet.next()){
			lobCount=objResultSet.getInt(1);	
			}	
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, ""," Inserting RACPC into The BANCA_BRANCH_NAME_HISTORY Table :::");
			objPStmt.close();				
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException" + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
				
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
			return lobCount;
			
		}
}
