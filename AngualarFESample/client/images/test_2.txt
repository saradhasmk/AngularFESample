package com.planetsoft.picp.targets.data.dao;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;
import java.text.DateFormatSymbols;
import java.text.SimpleDateFormat;
import java.sql.Types;












import com.planetsoft.drs.utilities.CommonDTO;
import com.planetsoft.drs.utilities.CommonUtils;
import com.planetsoft.drs.utilities.IComplaintConstants;
import com.planetsoft.drs.utilities.IConstants;
import com.planetsoft.drs.utilities.IDBConstants;
import com.planetsoft.drs.utilities.IEnrollmentRuntimeQueries;
import com.planetsoft.drs.utilities.ILogger;
import com.planetsoft.drs.utilities.ITargetConstants;
import com.planetsoft.drs.utilities.ITargetQueries;
import com.planetsoft.drs.utilities.LogManager;
import com.planetsoft.drs.utilities.PSSException;
import com.planetsoft.drs.utilities.TargetsCommonDTO;
import com.planetsoft.exim.define.DataObject;
import com.planetsoft.exim.define.EXIMConfiguration;
import com.planetsoft.exim.define.Query;
import com.planetsoft.picp.commission.data.dto.UploadEftNeftPaymentDTO;
import com.planetsoft.picp.common.data.dto.PartyContextDTO;
import com.planetsoft.picp.common.data.dto.SrcTrgDTO;
import com.planetsoft.picp.targets.data.dto.QueryInfoDTO;
import com.planetsoft.picp.targets.data.dto.TargetUploadDTO;
import com.planetsoft.picp.targets.data.dto.TargetsDTO;
import com.planetsoft.picp.targets.data.dto.AchievementDTO;
import com.planetsoft.picp.targets.data.dto.TargetsRuleDTO;
import com.planetsoft.picp.common.data.vo.UserContextVO;
import com.tpp.components.util.classes.BaseDAO;
import com.tpp.components.util.classes.BaseDAOException;

public class TargetsDAO extends BaseDAO{

	private static final String STRCLASSNAME = "TargetsDAO";

	ILogger LogUtil = LogManager.getInstance();

	Date currDate = Calendar.getInstance().getTime();

	public TargetsDAO() {
	}
	
	
	public ArrayList getChannelTypes() throws PSSException {

		final String STRMETHODNAME = "getChannelTypes";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		ResultSet objResultSet1 = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;		
		ArrayList arrChannelList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();

			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_CHANNEL_TYPE);
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				while (objResultSet.next()) {
					commonDTO = new CommonDTO();
					commonDTO.setId(objResultSet.getString(1));
					commonDTO.setDesc(objResultSet.getString(2));
					arrChannelList.add(commonDTO);
				}
			}
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrChannelList;
	}
	public ArrayList getSubChannelList(int channelId) throws PSSException {

		final String STRMETHODNAME = "getSubChannelList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrSubChannelList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
			String qry = ITargetQueries.GET_SUB_CHANNEL_TYPE;
			if(channelId> 0){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_SUB_CHANNEL_TYPE);
				objPStmt.setInt(1, channelId);
				objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrSubChannelList.add(commonDTO);
					}
				}
							
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrSubChannelList;
	}
	public ArrayList getTargetType() throws PSSException {

		final String STRMETHODNAME = "getSubChannelList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrTypeList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_TYPE);
				objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrTypeList.add(commonDTO);
					}
				
							
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrTypeList;
	}
	public String getHierarchyId(Connection objConnection,int subChannelPartyId) throws PSSException {

		final String STRMETHODNAME = "getHierarchyId";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
	
		PreparedStatement objPStmt = null;
		
		String hierarchyId = null ;
		CommonDTO commonDTO = null; 
		try {			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_HIERARCHY_GRP);
			objPStmt.setString(1, String.valueOf(subChannelPartyId));
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				if (objResultSet.next()) {
					hierarchyId = objResultSet.getString(1);
				}
			
			}			
			objResultSet.close();
			objPStmt.close();	
			
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, null);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return hierarchyId;
	}
	public String getTargetName(Connection objConnection,int targetTypeId) throws PSSException {

		final String STRMETHODNAME = "getTargetName";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;	
		PreparedStatement objPStmt = null;		
		String targetNm = null ;
		
		try {		
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_TYPENAME);
			objPStmt.setInt(1, targetTypeId);
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				if (objResultSet.next()) {
					targetNm = objResultSet.getString(1);
				}
			
			}			
			objResultSet.close();
			objPStmt.close();			
			
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, null);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetNm;
	}
	
	public ArrayList loadTargetEntityMaster(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "loadTargetEntityMaster";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrEntityList = new ArrayList();
		CommonDTO commonDTO = null; 
		String hierarchyId=null;
		try {
			objConnection = getDbConnection();
			if(targetsDTO.getEntityName()!=null && !(targetsDTO.getEntityName().trim().equals(""))){
			 hierarchyId = this.getHierarchyId(objConnection,Integer.parseInt(targetsDTO.getTargetEntityPartyId()));					
			}
			else{
			hierarchyId = this.getHierarchyId(objConnection,targetsDTO.getSubChannelPartyId());	
			}
		
			String targetType = this.getTargetName(objConnection, targetsDTO.getTargetTypeId());
			if(targetType!=null && targetType.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_MASTER_GEO);
			else
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_MASTER_POSITION_TYPE);
			objPStmt.setString(1, hierarchyId)	;
			objPStmt.setString(2, String.valueOf(targetsDTO.getChannelPartyId()))	;
			objPStmt.setString(3, String.valueOf(targetsDTO.getSubChannelPartyId()))	;
			objPStmt.setString(4, String.valueOf(targetsDTO.getTargetTypeId()))	;
			objPStmt.setString(5, String.valueOf(targetsDTO.getSelectedTargetEntityType()))	;
			objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrEntityList.add(commonDTO);
					}
				
							
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrEntityList;
	}
	
	public ArrayList loadTargetEntitySelected(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "loadTargetEntitySelected";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrEntityList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
			
			//String hierarchyId = this.getHierarchyId(objConnection,targetsDTO.getSubChannelPartyId());
			String targetType = this.getTargetName(objConnection, targetsDTO.getTargetTypeId());
			if(targetType!=null && targetType.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
				if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_SEL_GEO_HO);	
				}
				else{
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_SEL_GEO);	
				}
			else if(targetType!=null && targetType.equalsIgnoreCase(ITargetConstants.TARGET_TYP_HUMAN))
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_SEL_HUMAN);
			else
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_SELECTED_OTHERS);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
			objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrEntityList.add(commonDTO);
					}				
							
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrEntityList;
	}
	public ArrayList loadTargetType(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "loadTargetEntitySelected";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrEntityList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
			
			//String hierarchyId = this.getHierarchyId(objConnection,targetsDTO.getSubChannelPartyId());
			String targetType = this.getTargetName(objConnection, targetsDTO.getTargetTypeId());
			if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1"))
			{
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_SEL_GEO_HO_INFO);
			}
			else if(targetType!=null && targetType.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
			{
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_SEL_GEO);
			}			
			else
			{
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY_SEL_HUMAN);
			}
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
			objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrEntityList.add(commonDTO);
					}
				
							
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrEntityList;
	}
	public ArrayList getTargetFrequencyList() throws PSSException {

		final String STRMETHODNAME = "getTargetFrequencyList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();

			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_FREQ_LIST);
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				while (objResultSet.next()) {
					commonDTO = new CommonDTO();
					commonDTO.setId(objResultSet.getString(1));
					commonDTO.setDesc(objResultSet.getString(2));
					arrList.add(commonDTO);
				}
			}
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrList;
	}
	public TargetsDTO saveTargetTypeList(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "saveTargetTypeList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		boolean hdrValUpdt = false ;
		boolean insertNewHdr = false ;
		boolean updateDet = true ;
		int prevTargHdrId = 0 ;
		try {
			objConnection = getDbConnection();
			if(targetsDTO.getTargetDefHdrId() > 0)
			{
				prevTargHdrId =  targetsDTO.getTargetDefHdrId() ;
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_DEF_HDR);
				objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
				objResultSet=objPStmt.executeQuery();
				while (objResultSet.next()) {
					String uploadInd=objResultSet.getString("UPLOAD_IND");
					if(uploadInd==null)
					{
						uploadInd="";		
					}
					if(objResultSet.getInt("target_frequency") != targetsDTO.getTargetFreqId())
						hdrValUpdt = true ;
					else if(objResultSet.getInt("review_frequency") != targetsDTO.getReviewFreqId())
						hdrValUpdt = true ;
					else if(!objResultSet.getString("target_start_month").equalsIgnoreCase(targetsDTO.getTargetStartMon()))
						hdrValUpdt = true ;					
					else if(!uploadInd.trim().equalsIgnoreCase(targetsDTO.getWithUploadInd()))
						hdrValUpdt = true ;
										
				}
				objResultSet.close();
				objPStmt.close();
				if(hdrValUpdt)
				{
					objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_DEF_HDR);
					
					objPStmt.setTimestamp(1, CommonUtils.getCurrentTimeStamp());
					objPStmt.setString(2, targetsDTO.getLstUpdtUserId()) ;
					objPStmt.setInt(3, targetsDTO.getTargetDefHdrId())	;
					int rows = objPStmt.executeUpdate() ;
					objPStmt.close();
					if(rows > 0)
						insertNewHdr = true ;
					
					if(insertNewHdr){
						objPStmt = objConnection.prepareStatement(ITargetQueries.TA_UPDATE_DET_HIST);
						objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
						rows = objPStmt.executeUpdate() ;
						objPStmt.close();
						if(rows > 0)
						updateDet = true ;
				
						/*objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_DEF_DET);						
						objPStmt.setTimestamp(1, CommonUtils.getCurrentTimeStamp());
						objPStmt.setString(2, targetsDTO.getLstUpdtUserId()) ;
						objPStmt.setInt(3, targetsDTO.getTargetDefHdrId())	;
						rows = objPStmt.executeUpdate() ;
						objPStmt.close();*/
					}
					
				}
			}
			else 
				insertNewHdr = true ;
			if(insertNewHdr){
				int taHdrMaxId = super.getMaxId(ITargetConstants.TA_TARGET_DEF_HDR );
				String hierarchyId=null;
				if(targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					hierarchyId=this.getHierarchyId(objConnection,Integer.parseInt(targetsDTO.getTargetEntityPartyId()));
						
				}
				else if(targetsDTO.getSelectedTargetEntityType().trim().equals("0")){
					hierarchyId = this.getHierarchyId(objConnection,targetsDTO.getSubChannelPartyId());	
				}
				objPStmt = objConnection.prepareStatement(ITargetQueries.INSERT_DEF_HDR) ;
				objPStmt.setInt(1, taHdrMaxId) ;
				objPStmt.setInt(2, targetsDTO.getChannelPartyId()) ;
				objPStmt.setInt(3, targetsDTO.getSubChannelPartyId()) ;
				objPStmt.setInt(4, targetsDTO.getTargetTypeId()) ;
				objPStmt.setInt(5, targetsDTO.getTargetFreqId()) ;
				objPStmt.setInt(6, targetsDTO.getReviewFreqId()) ;
				objPStmt.setString(7, targetsDTO.getTargetStartMon()) ;
				objPStmt.setString(8, "Y") ;
				objPStmt.setTimestamp(9, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(10, targetsDTO.getLstUpdtUserId()) ;
				objPStmt.setString(11, "N") ;
				if(!targetsDTO.getSelectedTargetEntityType().trim().equals("0")){
				objPStmt.setString(12,targetsDTO.getSelectedTargetEntityType());
				if(targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt.setNull(13, Types.INTEGER);	
				}
				else{
					objPStmt.setInt(13,Integer.parseInt(targetsDTO.getSelectedPartnerType()));
				}
				if(targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt.setNull(14, Types.VARCHAR);	
				}
				else{
					objPStmt.setString(14,targetsDTO.getEntityName());
				}
				if(targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt.setNull(15, Types.INTEGER);	
				}
				else{
					objPStmt.setString(15,hierarchyId);
				}
				
					objPStmt.setString(16,targetsDTO.getWithUploadInd());	
				
			}
				else{
					objPStmt.setString(12,targetsDTO.getSelectedTargetEntityType());
					objPStmt.setNull(13, Types.INTEGER);	
					objPStmt.setNull(14, Types.VARCHAR);	
					objPStmt.setNull(15, Types.INTEGER);	
					
						objPStmt.setString(16,targetsDTO.getWithUploadInd());	
					
				}
				int rows = objPStmt.executeUpdate() ;
				objPStmt.close();
				if(rows > 0){
					targetsDTO.setTargetDefHdrId(taHdrMaxId);
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Rows Inserted: Hdr Id :",""+taHdrMaxId);					
				}
				
			}
			
				
			String type = this.getTargetName(objConnection, targetsDTO.getTargetTypeId());
			String strSelTargetIds = null;
			for(int i=0;i<targetsDTO.getTargetSelected().length;i++)
			{
				String strSelTarget = targetsDTO.getTargetSelected()[i];
				if(strSelTargetIds!=null)
					strSelTargetIds += "," + strSelTarget ;
				else
					strSelTargetIds = strSelTarget;
				if(type!=null && type.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
					objPStmt = objConnection.prepareStatement(ITargetQueries.SELECT_COUNT_GEO);
				else 
					objPStmt = objConnection.prepareStatement(ITargetQueries.SELECT_COUNT_HUMAN);
			
					
				if(prevTargHdrId>0)
					objPStmt.setInt(1, prevTargHdrId)	;
				else	
					objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
				objPStmt.setString(2, strSelTarget)	;
				objResultSet=objPStmt.executeQuery();
				int count = 0 ;
				if (objResultSet.next()) {
					count = objResultSet.getInt(1);
				}
				objResultSet.close();
				objPStmt.close();
				
				if(count == 0){
					int taDetMaxId = super.getMaxId(ITargetConstants.TA_TARGET_DEF_DET );
					
					objPStmt = objConnection.prepareStatement(ITargetQueries.INSERT_DEF_DET) ;

					objPStmt.setInt(1, taDetMaxId) ;
					objPStmt.setInt(2, targetsDTO.getTargetDefHdrId()) ;
					if(type!=null && type.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
						objPStmt.setNull(3, Types.INTEGER);
					else
						objPStmt.setInt(3, Integer.parseInt(strSelTarget)) ;
					objPStmt.setString(4, "Y") ;
					objPStmt.setTimestamp(5, CommonUtils.getCurrentTimeStamp());
					objPStmt.setString(6, targetsDTO.getLstUpdtUserId()) ;
					objPStmt.setString(7, "N") ;
					if(type!=null && type.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
						objPStmt.setString(8, strSelTarget) ;
					else
						objPStmt.setNull(8, Types.VARCHAR) ;
					
					
					int rows = objPStmt.executeUpdate() ;
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Rows Inserted: Det Id :",""+taDetMaxId);
					objPStmt.close();
				}
				else if(updateDet){
					if(type!=null && type.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
						objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_TADEF_GEO);
					else
						objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_TADEF_HUMAN);
				
					objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
					objPStmt.setInt(2, prevTargHdrId)	;
					objPStmt.setString(3, strSelTarget)	;
					int rows = objPStmt.executeUpdate() ;
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, " Det Rows Updated: ",""+rows);
					objPStmt.close();
				}
			}
			
			String qry = null ;
			if(type!=null && type.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO))
				qry = "Update ta_target_def_det set is_active_ind='N', is_deleted_ind='Y' , lst_updt_dtm=?, lst_updt_userid=? where ta_target_def_hdr_id=? and geo_hierarchy_grp_id not in ("+strSelTargetIds
					+") and is_active_ind='Y' and is_Deleted_ind='N'";
			else
				qry = "Update ta_target_def_det set is_active_ind='N', is_deleted_ind='Y' , lst_updt_dtm=?, lst_updt_userid=? where ta_target_def_hdr_id=? and human_pos_type_id not in ("+strSelTargetIds
				+") and is_active_ind='Y' and is_Deleted_ind='N'";
			
			objPStmt = objConnection.prepareStatement(qry) ;
			objPStmt.setTimestamp(1, CommonUtils.getCurrentTimeStamp());
			objPStmt.setString(2, targetsDTO.getLstUpdtUserId()) ;
			objPStmt.setInt(3, targetsDTO.getTargetDefHdrId()) ;
			int rows = objPStmt.executeUpdate() ;
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Rows Deleted: rows :",""+rows);
			objPStmt.close();
			
			if (objConnection != null) {
				objConnection.close();
			}
			targetsDTO.setMessage("Record saved successfully");
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetsDTO;
	}
	public TargetsDTO getTargetDefinitionValues(TargetsDTO objTargetsDTO) throws PSSException {

		final String STRMETHODNAME = "getTargetDefinitionValues";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		try {
			objConnection = getDbConnection();

			
			//objPStmt = objConnection.prepareStatement("select channel_party_id, sub_ch_party_id,target_type_id,target_frequency,review_frequency,target_Start_month from ta_target_def_hdr where ta_target_def_hdr_id=?");
			objPStmt = objConnection.prepareStatement("select channel_party_id, sub_ch_party_id,target_type_id,target_frequency,review_frequency,target_Start_month,TARGETPARTNERTYPE,partnertype,partnername,hierarchyid from ta_target_def_hdr where ta_target_def_hdr_id=?");
			objPStmt.setInt(1, objTargetsDTO.getTargetDefHdrId());
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				while (objResultSet.next()) {
					objTargetsDTO.setChannelPartyId(objResultSet.getInt("channel_party_id"));
					objTargetsDTO.setSubChannelPartyId(objResultSet.getInt("sub_ch_party_id"));
					objTargetsDTO.setTargetTypeId(objResultSet.getInt("target_type_id"));
					objTargetsDTO.setReviewFreqId(objResultSet.getInt("review_frequency"));
					objTargetsDTO.setTargetFreqId(objResultSet.getInt("target_frequency"));
					objTargetsDTO.setTargetStartMon(objResultSet.getString("target_Start_month"));
					objTargetsDTO.setSelectedTargetEntityType(objResultSet.getString("TARGETPARTNERTYPE"));
					objTargetsDTO.setSelectedPartnerType(objResultSet.getString("partnertype"));
					objTargetsDTO.setEntityName(objResultSet.getString("partnername"));
					//objTargetsDTO.setTargetStartMon(objResultSet.getString("TARGETPARTNERTYPE"));
				}
			}
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return objTargetsDTO;
	}
	public boolean fnValidateAddNewTarget(TargetsDTO objTargetsDTO) throws PSSException {

		final String STRMETHODNAME = "fnValidateAddNewTarget";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		boolean flag = true ;
		try {
			objConnection = getDbConnection();

			if(objTargetsDTO.getSelectedTargetEntityType()!=null && !objTargetsDTO.getSelectedTargetEntityType().trim().equals("") && objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
				objPStmt = objConnection.prepareStatement("select count(1) from ta_target_def_hdr where channel_party_id = ? and sub_ch_party_id = ? and target_type_id = ? and TARGETPARTNERTYPE=? and is_active_ind='Y' and is_deleted_ind='N' and PARTNERNAME=? ");
					
			}
			else{
				objPStmt = objConnection.prepareStatement("select count(1) from ta_target_def_hdr where channel_party_id = ? and sub_ch_party_id = ? and target_type_id = ? and TARGETPARTNERTYPE=? and is_active_ind='Y' and is_deleted_ind='N'");
					
			}
			objPStmt.setInt(1, objTargetsDTO.getChannelPartyId());
			objPStmt.setInt(2, objTargetsDTO.getSubChannelPartyId());
			objPStmt.setInt(3, objTargetsDTO.getTargetTypeId());
			objPStmt.setString(4, objTargetsDTO.getSelectedTargetEntityType());
			if(objTargetsDTO.getSelectedTargetEntityType()!=null && !objTargetsDTO.getSelectedTargetEntityType().trim().equals("") && objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
				objPStmt.setString(5, objTargetsDTO.getEntityName());		
			}
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				if (objResultSet.next()) {
					
					int count = objResultSet.getInt(1) ;
					if(count>0)
						flag = false ;
				}
			}
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return flag;
	}
	public ArrayList getTargetMonthList() throws PSSException {

		final String STRMETHODNAME = "getTargetMonthList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrMonList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
		
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_MONTH);
				objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(2));
						commonDTO.setDesc(objResultSet.getString(2));
						arrMonList.add(commonDTO);
					}
				}
							
				objResultSet.close();
				objPStmt.close();
			
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrMonList;
	}
	
	public ArrayList getParameterList(TargetsDTO targetsDTO) throws PSSException {

		final String STRMETHODNAME = "getParameterList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrParameterList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();

			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_PARAMETER_LIST);
			objPStmt.setInt(1, targetsDTO.getChannelPartyId());
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				while (objResultSet.next()) {
					commonDTO = new CommonDTO();
					commonDTO.setId(objResultSet.getString(1));
					commonDTO.setDesc(objResultSet.getString(2));
					arrParameterList.add(commonDTO);
				}
			}
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrParameterList;
	}
	
	public TargetsDTO saveTAParameters(TargetsDTO targetsDTO,PartyContextDTO partyContextDTO) throws PSSException {

		final String STRMETHODNAME = "saveTAParameters";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		String targetDefDetId = null;
		ArrayList paramList = null;
		ArrayList eventList = null;
		HashMap<String, Integer> ruleQueryMap=null;
		try {
			objConnection = getDbConnection();			
			int hdrCount = 0;						
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_DEF_DET_ID);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
			objPStmt.setInt(2, targetsDTO.getTargetEntity());
			objPStmt.setInt(3, targetsDTO.getTargetEntity());
			objResultSet=objPStmt.executeQuery();
			if(objResultSet.next()) {
				targetDefDetId = objResultSet.getString(1);
			}
			objResultSet.close();
			objPStmt.close();
			
			//Soft delete the records:start
			objPStmt =objConnection.prepareStatement(ITargetQueries.UPDATE_TA_RULE_QRY_PARAM);
			objPStmt.setTimestamp(1, CommonUtils.getCurrentTimeStamp());
			objPStmt.setString(2, partyContextDTO.getUserId());
			objPStmt.setString(3, targetDefDetId);
			objPStmt.executeUpdate();
			objPStmt.close();
			
			objPStmt =objConnection.prepareStatement(ITargetQueries.UPDT_TA_RULE_QRY);
			objPStmt.setTimestamp(1, CommonUtils.getCurrentTimeStamp());
			objPStmt.setString(2, partyContextDTO.getUserId());
			objPStmt.setString(3, targetDefDetId);
			objPStmt.executeUpdate();
			objPStmt.close();
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_PARAM_DET);
			objPStmt.setString(1, partyContextDTO.getUserId());
			objPStmt.setString(2, targetDefDetId);			
			objPStmt.executeUpdate();
			objPStmt.close();
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_PARAM_HDR);
			objPStmt.setString(1, partyContextDTO.getUserId());
			objPStmt.setString(2, targetDefDetId);			
			objPStmt.executeUpdate();
			objPStmt.close();
			//Soft delete the records:end
			
			paramList = targetsDTO.getParamSelectedList();
			eventList = targetsDTO.getEventSelectedList();
			int maxHdrId = super.getMaxId(IDBConstants.PARAMETER_HDR_TBL);
			objPStmt = objConnection.prepareStatement(ITargetQueries.INSERT_TA_PARAMETER_HDR);
			objPStmt.setInt(1, maxHdrId);
			objPStmt.setString(2, targetDefDetId);
			objPStmt.setString(3, partyContextDTO.getUserId());
			hdrCount = objPStmt.executeUpdate();
			objPStmt.close();
			
			
			
			if(hdrCount>0){
				if(!paramList.isEmpty() && paramList.size()>0){					
						
					ruleQueryMap=saveRuleQuery(targetsDTO,  partyContextDTO.getUserId());
					if(ruleQueryMap!=null){
					Iterator itrParam = paramList.iterator();
					//Iterator itrEvent = eventList.iterator();					
					objPStmt = objConnection.prepareStatement(ITargetQueries.INSERT_TA_PARAMETER_DET);
					while(itrParam.hasNext()){
						String paramId=(String)itrParam.next();
						if(paramId!=null && !paramId.trim().equals("")){
						objPStmt.setInt(1, super.getMaxId(IDBConstants.PARAMETER_DET_TBL));
						objPStmt.setInt(2, maxHdrId);
						objPStmt.setString(3, paramId);
						objPStmt.setNull(4, Types.VARCHAR);
						objPStmt.setString(5, partyContextDTO.getUserId());
						if(ruleQueryMap !=null && ruleQueryMap.get(paramId) !=null )
							objPStmt.setInt(6, ruleQueryMap.get(paramId));
						else
							objPStmt.setNull(6, Types.INTEGER);
						objPStmt.addBatch();
						}
					}
					objPStmt.executeBatch();
					objPStmt.close();
					
					targetsDTO.setMessage(ITargetConstants.UPDATE_MSG);
				}
					else
					{
						targetsDTO.setMessage(ITargetConstants.SAVED_MSG);
					}
			}
				else
				{
					targetsDTO.setMessage(ITargetConstants.SAVED_MSG);
				}
			
			if (objConnection != null) {
				objConnection.close();
			}
			}
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetsDTO;
	}
	
	public TargetsDTO loadParamDetails(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "loadParamDetails";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrEntityList = new ArrayList();
		CommonDTO commonDTO = null;
		try {
			objConnection = getDbConnection();		
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_HDR_DETAILS);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
			objResultSet=objPStmt.executeQuery();
			if(objResultSet.next()) {				
				targetsDTO.setChannelPartyId(objResultSet.getInt(1));
				targetsDTO.setSubChannelPartyId(objResultSet.getInt(2));
				targetsDTO.setTargetTypeId(objResultSet.getInt(3));		
				targetsDTO.setSelectedTargetEntityType(objResultSet.getString(4));		
			}
			objResultSet.close();
			objPStmt.close();
			
			//set subchannel metadata based on channelId
			ArrayList subChannelList = this.getSubChannelList(targetsDTO.getChannelPartyId());
			if(subChannelList!=null && !subChannelList.isEmpty()){
				targetsDTO.setSubChannelList(subChannelList);
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetsDTO;
	}
	
	public TargetsDTO loadEventCodes(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "loadEventCodes";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		CommonDTO commonDTO = null;
		
		ArrayList eventCdList = new ArrayList();
		try {
			objConnection = getDbConnection();						
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_EVENT_CODES_FOR_PARAMETER);
			objPStmt.setInt(1, targetsDTO.getChannelPartyId());
			objPStmt.setInt(2, targetsDTO.getChannelPartyId());			
			
			objResultSet=objPStmt.executeQuery();			
			while (objResultSet.next()) {				
				commonDTO = new CommonDTO();
				commonDTO.setId(objResultSet.getString(1));
				commonDTO.setDesc(objResultSet.getString(2));
				eventCdList.add(commonDTO);
			}						
			objResultSet.close();
			objPStmt.close();			
			
			targetsDTO.setEventCodeList(eventCdList);
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetsDTO;
	}
	
	public TargetsDTO getSavedParameters(TargetsDTO targetsDTO)  throws PSSException{
		final String STRMETHODNAME = "getSavedParameters";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		StringBuffer mappedParams = new StringBuffer();
		try {
			objConnection = getDbConnection();
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_PRAMETERS_SAVED);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
			objPStmt.setInt(2, targetsDTO.getTargetEntity());			
			objPStmt.setInt(3, targetsDTO.getTargetEntity());
			
			objResultSet=objPStmt.executeQuery();			
			while (objResultSet.next()) {
				mappedParams.append(objResultSet.getString(1));
				mappedParams.append("~"+objResultSet.getString(2)+" ");
			}						
			objResultSet.close();
			objPStmt.close();
			
			if(mappedParams.length()>0){
				targetsDTO.setMappedColumns(mappedParams.toString().trim());
			} else{
				targetsDTO.setMappedColumns("");
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetsDTO;
	}
	
	public String getTargetEntity(String paramDefHdrId)  throws PSSException{
		final String STRMETHODNAME = "getTargetEntity";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		String targetEntity = null;		
		
		try {
			objConnection = getDbConnection();
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_ENTITY);
			objPStmt.setString(1, paramDefHdrId);			
			
			objResultSet=objPStmt.executeQuery();			
			while (objResultSet.next()) {
				targetEntity= objResultSet.getString(1);				
			}						
			objResultSet.close();
			objPStmt.close();			
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetEntity;
	}
	
	public int deActivateParameters(String paramHdrId) throws PSSException {

		final String STRMETHODNAME = "deActivateParameters";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		int count = 0;
		
		try {
			objConnection = getDbConnection();		
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_PARAMDEF_DET);
			objPStmt.setString(1, paramHdrId);						
			count = objPStmt.executeUpdate();
			objPStmt.close();
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.UPDATE_PARAMDEF_HDR);
			objPStmt.setString(1, paramHdrId);						
			objPStmt.executeUpdate();
			objPStmt.close();				
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return count;
	}
	
	public String getTargetDefHdrId(TargetsDTO objTargetsDTO) throws PSSException {

		final String STRMETHODNAME = "getTargetDefHdrId";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		String tergetHdrId = null;		
		
		try {
			objConnection = getDbConnection();		
			
			if( objTargetsDTO.getSelectedTargetEntityType()!=null){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_HEADER_ID);	
				if(objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_PARTNER_GEO_HEADER_ID);		
				}
			}
			else{
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_HDR_ID);
			}
			objPStmt.setInt(1, objTargetsDTO.getChannelPartyId());						
			objPStmt.setInt(2, objTargetsDTO.getSubChannelPartyId());
			objPStmt.setInt(3, objTargetsDTO.getTargetTypeId());
			if( objTargetsDTO.getSelectedTargetEntityType()!=null){
				objPStmt.setString(4, objTargetsDTO.getSelectedTargetEntityType());
				if(objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					objPStmt.setString(5, objTargetsDTO.getEntityName());
				}
			}
			objResultSet = objPStmt.executeQuery();
			if(objResultSet.next()){
				tergetHdrId = objResultSet.getString(1);
			}
			objPStmt.close();		
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return tergetHdrId;
	}
	
	public TargetUploadDTO loadTargetIds(TargetsDTO objTargetsDTO,TargetUploadDTO objUploadDTO) throws PSSException {

		final String STRMETHODNAME = "loadTargetIds";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		String tergetHdrId = null;
		String targetDetId = null;
		
		try {
			objConnection = getDbConnection();		
			if( objTargetsDTO.getSelectedTargetEntityType()!=null){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_HEADER_ID);	
				if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_PARTNER_GEO_HDR_ID);	
				}
			}
			else{
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_HDR_ID);
			}			
			objPStmt.setInt(1, objTargetsDTO.getChannelPartyId());						
			objPStmt.setInt(2, objTargetsDTO.getSubChannelPartyId());
			objPStmt.setInt(3, objTargetsDTO.getTargetTypeId());
			if( objTargetsDTO.getSelectedTargetEntityType()!=null){
				objPStmt.setString(4, objTargetsDTO.getSelectedTargetEntityType());
				if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					objPStmt.setString(5, objTargetsDTO.getEntityName());
				}
			}
			objResultSet = objPStmt.executeQuery();
			if(objResultSet.next()){
				tergetHdrId = objResultSet.getString(1);
			}
			objPStmt.close();
			
			if(tergetHdrId!=null && !tergetHdrId.equals("") && objTargetsDTO.getTargetEntity()!=0){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_DET_ID);
				objPStmt.setString(1, tergetHdrId);						
				objPStmt.setInt(2, objTargetsDTO.getTargetEntity());
				objPStmt.setInt(3, objTargetsDTO.getTargetEntity());
				objResultSet = objPStmt.executeQuery();
				if(objResultSet.next()){
					targetDetId = objResultSet.getString(1);
				}
				objPStmt.close();
			}
			
			if(tergetHdrId!=null && targetDetId!=null){
				if(objUploadDTO!=null){
					objUploadDTO.setTargetHdrId(tergetHdrId);
					objUploadDTO.setTargetDetId(targetDetId);
					objUploadDTO.setTargetType(objTargetsDTO.getTargetTypeId()+"");
				}
				if(objTargetsDTO!=null){
					objTargetsDTO.setTargetDefHdrId(Integer.parseInt(tergetHdrId));
					if(targetDetId!=null && targetDetId.length()>0)
					objTargetsDTO.setTargetDefDetId(Integer.parseInt(targetDetId));
				}
								
			}
			
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return objUploadDTO;
	}
	
	public TargetUploadDTO getHeadersList(TargetUploadDTO objUploadDTO,TargetsDTO targetsDTO) throws PSSException {

		final String STRMETHODNAME = "getHeadersList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;		
		ArrayList headersList = new ArrayList();
		
		try {
			objConnection = getDbConnection();
			
			if(objUploadDTO.getTargetType()!=null && objUploadDTO.getTargetType().equals("1")){
				headersList.add(ITargetConstants.CHANNEL_LBL);   	
				headersList.add(ITargetConstants.SUBCHANNEL_LBL);
				headersList.add(ITargetConstants.TYPE_LBL);
				headersList.add(ITargetConstants.ENTITY_TYP_LBL);
							if(targetsDTO.getSelectedOrgType()!=null && !targetsDTO.getSelectedOrgType().trim().equals("")){
					if(targetsDTO.getSelectedOrgType().trim().equals("2")){	
						headersList.add(ITargetConstants.PARTNER_TYPE);		
					}				
				}
				if(targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					headersList.add(ITargetConstants.ENTITY_LBL);
					if(targetsDTO.getTargetEntity()!=0){
						headersList.add(ITargetConstants.GEO_UNIT_TYPE);
					}
				}
				
				//Added For TA Partner Addition ends
				
				headersList.add(ITargetConstants.ORG_LBL);
				headersList.add(ITargetConstants.CMSCODE_LBL);
				
			}else{
				headersList.add(ITargetConstants.CHANNEL_LBL);    	
				headersList.add(ITargetConstants.SUBCHANNEL_LBL);
				headersList.add(ITargetConstants.TYPE_LBL);
				headersList.add(ITargetConstants.POSITION_TYP_LBL);
				headersList.add(ITargetConstants.EMPLOYEENAME_LBL);
				headersList.add(ITargetConstants.CMSCODE_LBL);
				headersList.add(ITargetConstants.GEO_LBL);
				headersList.add(ITargetConstants.GEOCODE_LBL);
				headersList.add(ITargetConstants.ASSIGNMENT_LBL);
			}	
			if(objUploadDTO.getTargetDetId()== null || objUploadDTO.getTargetDetId().length()==0){
			if(objUploadDTO.getTargetHdrId()!=null && !objUploadDTO.getTargetHdrId().equals("")){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_DET_ID);
				objPStmt.setString(1, objUploadDTO.getTargetHdrId());						
				objPStmt.setString(2, objUploadDTO.getTargetEntity());
				objPStmt.setString(3, objUploadDTO.getTargetEntity());
				objResultSet = objPStmt.executeQuery();
				if(objResultSet.next()){
					objUploadDTO.setTargetDetId(objResultSet.getString(1));
				}
				objPStmt.close();
			}
			}
			ArrayList paramList = new ArrayList();
			CommonDTO commonDTO = null ;
			
			if(targetsDTO.getSelectedOrgType()!=null && !targetsDTO.getSelectedOrgType().trim().equals("") && targetsDTO.getSelectedOrgType().trim().equals("2")){
				if(targetsDTO.getSelectedTargetEntityType()!= null && !targetsDTO.getSelectedTargetEntityType().trim().equals("") && targetsDTO.getSelectedTargetEntityType().trim().equals("2")){	
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_HEADERS_FOR_UPLOAD);		
				}
				else if (targetsDTO.getSelectedTargetEntityType()!= null && !targetsDTO.getSelectedTargetEntityType().trim().equals("") && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_HEADERS_FOR_UPLOAD);	
				}
			}
			else if(targetsDTO.getSelectedOrgType()!=null && !targetsDTO.getSelectedOrgType().trim().equals("") && targetsDTO.getSelectedOrgType().trim().equals("1")){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_HEADERS_FOR_UPLOAD);
			}
			else{
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_HEADERS_FOR_UPLOAD);	
			}
			objPStmt.setString(1, objUploadDTO.getTargetDetId());
			
			objResultSet = objPStmt.executeQuery();
			while(objResultSet.next()){
				commonDTO = new CommonDTO();
				commonDTO.setDesc(objResultSet.getString(1));
				commonDTO.setId(objResultSet.getString(2)) ;
				paramList.add(commonDTO);
				headersList.add(objResultSet.getString(1));
			}
			objPStmt.close();		
			
			if (objConnection != null) {
				objConnection.close();
			}
			
			objUploadDTO.setHeaderList(headersList);
			objUploadDTO.setParamList(paramList);
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return objUploadDTO;
	}	
	
	public ArrayList getRecordsList(TargetUploadDTO objUploadDTO,TargetsDTO targetsDTO) throws PSSException {

		final String STRMETHODNAME = "getRecordsList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		ResultSet objResultSet1 = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		PreparedStatement objPStmt1 = null;
		String tergetHdrId = null;
		String targetDetId = null;
		ArrayList recordsList = new ArrayList();
		HashMap map = null;
		String channelNm = null;
		String subChannelNm = null;
		
		try {
			objConnection = getDbConnection();
			
			//getting Channel & Subchannel name: Begin
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_NAME);
			objPStmt.setInt(1, targetsDTO.getChannelPartyId());
			objResultSet = objPStmt.executeQuery();
			if(objResultSet.next()){
				channelNm = objResultSet.getString(1);
			}
			objResultSet.close();
			
			objPStmt.setInt(1, targetsDTO.getSubChannelPartyId());
			objResultSet = objPStmt.executeQuery();
			if(objResultSet.next()){
				subChannelNm = objResultSet.getString(1);
			}
			objResultSet.close();			
			objPStmt.close();
			//End
			
			
			if(targetsDTO.getTargetTypeId()==1){
				//Added For TA Partner Addition starts
				if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_PARTNER_HO_GEO_DATA_FOR_UPLOAD);
					objPStmt.setInt(1, targetsDTO.getSubChannelPartyId());
					objPStmt.setInt(2,targetsDTO.getTargetEntity());					
					objResultSet = objPStmt.executeQuery();
					while(objResultSet.next()){
						map = new HashMap();
						map.put(ITargetConstants.CHANNEL_LBL, channelNm);
						map.put(ITargetConstants.SUBCHANNEL_LBL, subChannelNm);
						map.put(ITargetConstants.TYPE_LBL, "Geo");
						map.put(ITargetConstants.ENTITY_TYP_LBL, objResultSet.getString("Partner_Type"));
						map.put(ITargetConstants.PARTNER_TYPE, objResultSet.getString("Partner_Type"));			
						map.put(ITargetConstants.ORG_LBL, objResultSet.getString("ORG_NM"));
						map.put(ITargetConstants.CMSCODE_LBL, objResultSet.getString("IDENTIFIER_VALUE"));	
						/* To display already uploaded records */
						int partyId =  objResultSet.getInt("party_id") ;
						int paramHdrid = 0 ;
							objPStmt1 = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_HDR);
									
							objPStmt1.setInt(1, targetsDTO.getTargetDefDetId());
							objPStmt1.setString(2, targetsDTO.getUploadFor());
							objPStmt1.setString(3, targetsDTO.getFinancialYear());
							objPStmt1.setInt(4, partyId);
							objResultSet1 = objPStmt1.executeQuery();
							if(objResultSet1.next()){
								paramHdrid = objResultSet1.getInt(1);
							}
							objResultSet1.close();
							objPStmt1.close() ;
							if(paramHdrid>0) {
								objPStmt1 = objConnection.prepareStatement("select ad.ta_parameter_desc, td.target_value from Target_Parameter_Upload_Det td, adm_ta_parameters ad where   td.target_param_upload_hdr_id = ? and ad.ta_parameter_id = td.parameter_id and td.IS_DELETED_IND='N'");
								objPStmt1.setInt(1, paramHdrid);
								objResultSet1 = objPStmt1.executeQuery();
								while(objResultSet1.next()){									
									map.put(objResultSet1.getString("ta_parameter_desc"), objResultSet1.getString("target_value"));
								}
								objResultSet1.close() ;
								objPStmt1.close() ;
							}
						
						recordsList.add(map);
					}
					objResultSet.close();
					objPStmt.close();	
				
				
				
				}
				else if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_PARTNER_GEO_DATA_FOR_UPLOAD);
					objPStmt.setInt(1, Integer.parseInt(targetsDTO.getTargetEntityPartyId()));
					objPStmt.setInt(2,targetsDTO.getTargetEntity());					
					objResultSet = objPStmt.executeQuery();
					while(objResultSet.next()){
						map = new HashMap();
						map.put(ITargetConstants.CHANNEL_LBL, channelNm);
						map.put(ITargetConstants.SUBCHANNEL_LBL, subChannelNm);
						map.put(ITargetConstants.TYPE_LBL, "Geo");
						map.put(ITargetConstants.ENTITY_TYP_LBL, objResultSet.getString("Geo_Unit_Type"));
						map.put(ITargetConstants.PARTNER_TYPE, objResultSet.getString("Partner_Type"));
						map.put(ITargetConstants.ENTITY_LBL, objResultSet.getString("Entity_NAME"));
						map.put(ITargetConstants.GEO_UNIT_TYPE, objResultSet.getString("Geo_Unit_Type"));						
						map.put(ITargetConstants.ORG_LBL, objResultSet.getString("ORG_NM"));
						map.put(ITargetConstants.CMSCODE_LBL, objResultSet.getString("IDENTIFIER_VALUE"));	
						/* To display already uploaded records */
						int partyId =  objResultSet.getInt("party_id") ;
						int paramHdrid = 0 ;
							objPStmt1 = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_HDR);
									
							objPStmt1.setInt(1, targetsDTO.getTargetDefDetId());
							objPStmt1.setString(2, targetsDTO.getUploadFor());
							objPStmt1.setString(3, targetsDTO.getFinancialYear());
							objPStmt1.setInt(4, partyId);
							objResultSet1 = objPStmt1.executeQuery();
							if(objResultSet1.next()){
								paramHdrid = objResultSet1.getInt(1);
							}
							objResultSet1.close() ;
							objPStmt1.close() ;
							if(paramHdrid>0) {
								objPStmt1 = objConnection.prepareStatement("select ad.ta_parameter_desc, td.target_value from Target_Parameter_Upload_Det td, adm_ta_parameters ad where   td.target_param_upload_hdr_id = ? and ad.ta_parameter_id = td.parameter_id and td.IS_DELETED_IND='N' ");
										
								objPStmt1.setInt(1, paramHdrid);
								objResultSet1 = objPStmt1.executeQuery();
								while(objResultSet1.next()){
									
									map.put(objResultSet1.getString("ta_parameter_desc"), objResultSet1.getString("target_value"));
								}
								objResultSet1.close() ;
								objPStmt1.close() ;
							}
						
						recordsList.add(map);
					}
					objResultSet.close();
					objPStmt.close();	
							
				}
				else
				{
					
				//Added For TA Partner Addition ends
				
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_GEO_DATA_FOR_UPLOAD);
				objPStmt.setInt(1, targetsDTO.getTargetEntity());
				
				objResultSet = objPStmt.executeQuery();
				while(objResultSet.next()){
					map = new HashMap();
					map.put(ITargetConstants.CHANNEL_LBL, channelNm);
					map.put(ITargetConstants.SUBCHANNEL_LBL, subChannelNm);
					map.put(ITargetConstants.TYPE_LBL, "Geo");
					map.put(ITargetConstants.ENTITY_TYP_LBL, objResultSet.getString("hierarchy_grp_nm"));
					map.put(ITargetConstants.ORG_LBL, objResultSet.getString("org_nm"));
					map.put(ITargetConstants.CMSCODE_LBL, objResultSet.getString("identifier_value"));	
					/* To display already uploaded records */
					int partyId =  objResultSet.getInt("party_id") ;
					int paramHdrid = 0 ;
						objPStmt1 = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_HDR);
								
						objPStmt1.setInt(1, targetsDTO.getTargetDefDetId());
						objPStmt1.setString(2, targetsDTO.getUploadFor());
						objPStmt1.setString(3, targetsDTO.getFinancialYear());
						objPStmt1.setInt(4, partyId);
						objResultSet1 = objPStmt1.executeQuery();
						if(objResultSet1.next()){
							paramHdrid = objResultSet1.getInt(1);
						}
						objResultSet1.close() ;
						objPStmt1.close() ;
						if(paramHdrid>0) {
							objPStmt1 = objConnection.prepareStatement("select ad.ta_parameter_desc, td.target_value from Target_Parameter_Upload_Det td, adm_ta_parameters ad where   td.target_param_upload_hdr_id = ? and ad.ta_parameter_id = td.parameter_id and td.IS_DELETED_IND='N'");
									
							objPStmt1.setInt(1, paramHdrid);
							objResultSet1 = objPStmt1.executeQuery();
							while(objResultSet1.next()){
								
								map.put(objResultSet1.getString("ta_parameter_desc"), objResultSet1.getString("target_value"));
							}
							objResultSet1.close() ;
							objPStmt1.close() ;
						}
					
					recordsList.add(map);
				}
				objResultSet.close();
				objPStmt.close();
				}
			}			
			else if(targetsDTO.getTargetTypeId()==2){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_HUMAN_DATA_FOR_UPLOAD);
				objPStmt.setInt(1, targetsDTO.getTargetEntity());
				
				objResultSet = objPStmt.executeQuery();
				while(objResultSet.next()){
					map = new HashMap();
					map.put(ITargetConstants.CHANNEL_LBL, channelNm);
					map.put(ITargetConstants.SUBCHANNEL_LBL, subChannelNm);
					map.put(ITargetConstants.TYPE_LBL, "Human");
					map.put(ITargetConstants.POSITION_TYP_LBL, objResultSet.getString("ROLE"));
					map.put(ITargetConstants.EMPLOYEENAME_LBL, objResultSet.getString("NAME"));
					map.put(ITargetConstants.CMSCODE_LBL, objResultSet.getString("code"));
					map.put(ITargetConstants.GEO_LBL, objResultSet.getString("ORGANIZATION"));
					map.put(ITargetConstants.GEOCODE_LBL, objResultSet.getString("orgcode"));
					map.put(ITargetConstants.ASSIGNMENT_LBL, objResultSet.getString("assignmnettype"));
					
					/* To display already uploaded records */
					int partyId =  objResultSet.getInt("party_id") ;
					int paramHdrid = 0 ;
						objPStmt1 = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_HDR);
								
						objPStmt1.setInt(1, targetsDTO.getTargetDefDetId());
						objPStmt1.setString(2, targetsDTO.getUploadFor());
						objPStmt1.setString(3, targetsDTO.getFinancialYear());
						objPStmt1.setInt(4, partyId);
						objResultSet1 = objPStmt1.executeQuery();
						if(objResultSet1.next()){
							paramHdrid = objResultSet1.getInt(1);
						}
						objResultSet1.close() ;
						objPStmt1.close() ;
						if(paramHdrid>0) {
							objPStmt1 = objConnection.prepareStatement("select ad.ta_parameter_desc, td.target_value from Target_Parameter_Upload_Det td, adm_ta_parameters ad where   td.target_param_upload_hdr_id = ? and ad.ta_parameter_id = td.parameter_id and td.IS_DELETED_IND='N' ");
									
							objPStmt1.setInt(1, paramHdrid);
							objResultSet1 = objPStmt1.executeQuery();
							while(objResultSet1.next()){
								
								map.put(objResultSet1.getString("ta_parameter_desc"), objResultSet1.getString("target_value"));
							}
							objResultSet1.close() ;
							objPStmt1.close() ;
						}
					
						
					recordsList.add(map);
				}
				objResultSet.close();
				objPStmt.close();
			}
			
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return recordsList;
	}
	
	public ArrayList getFinancialYearList() throws PSSException {

		final String STRMETHODNAME = "getFinancialYearList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();

			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_YEARS);
			objResultSet=objPStmt.executeQuery();

			
			while (objResultSet.next()) {
				commonDTO = new CommonDTO();
				commonDTO.setId(objResultSet.getString(1));
				commonDTO.setDesc(objResultSet.getString(1));
				arrList.add(commonDTO);
				
				commonDTO = new CommonDTO();
				commonDTO.setId(objResultSet.getString(2));
				commonDTO.setDesc(objResultSet.getString(2));
				arrList.add(commonDTO);
				
				commonDTO = new CommonDTO();
				commonDTO.setId(objResultSet.getString(3));
				commonDTO.setDesc(objResultSet.getString(3));
				arrList.add(commonDTO);
			}
			
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrList;
	}
	public int  createImportProcessId(TargetsDTO objTargetsDTO)	throws PSSException {
		final String STRMETHODNAME = "createImportProcessId";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		int processId = 0 ;
		try {
			objConnection = getDbConnection();
			 
				processId = super.getMaxId(ITargetConstants.TARGET_UPLOAD_PROCESS);
				objPStmt = objConnection
				.prepareStatement("insert into Target_Upload_Process (target_upload_process_id,process_start_time,File_Name,file_path,Status_Id,LST_UPDT_USRID,lst_updt_dtm,is_deleted_ind) values(?,?,?,?,?,?,?,?)");
				objPStmt.setInt(1, processId);
				objPStmt.setTimestamp(2, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(3, objTargetsDTO.getFileName());
				objPStmt.setString(4, objTargetsDTO.getFilePath());
				objPStmt.setString(5, "1");
				objPStmt.setString(6, objTargetsDTO.getLstUpdtUserId());
				objPStmt.setTimestamp(7, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(8, "N");
				objPStmt.executeUpdate();
				
				if(null!=objPStmt)
					objPStmt.close();
								
				if(null!=objConnection)
					objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return processId;
	}
	public String  validateUploadTargetParameter(TargetUploadDTO objRowDTO,TargetsDTO targetsDTO)	throws PSSException {
		final String STRMETHODNAME = "validateUploadTargetParameter";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		String errMsg=null;
		try {
			if(targetsDTO.getTargetTypeId()==1){
				if(objRowDTO.getChannelName()==null || objRowDTO.getChannelName().length()==0){
					
						errMsg =  "Channel Not Available" ;
				}
				if(objRowDTO.getSubChannelName() ==null || objRowDTO.getSubChannelName().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Sub Channel Not Available" ;
					else
						errMsg =  "Sub Channel Not Available" ;
				}
				if(objRowDTO.getTargetTypeName() ==null || objRowDTO.getTargetTypeName().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Target Type Not Available" ;
					else
						errMsg =  "Target Type Not Available" ;
				}
				if(objRowDTO.getEntityType() ==null || objRowDTO.getEntityType().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Entity Type Not Available" ;
					else
						errMsg =  "Entity Type Not Available" ;
				}
				if(objRowDTO.getOrgName() ==null || objRowDTO.getOrgName().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Organization Not Available" ;
					else
						errMsg =  "Organization Not Available" ;
				}
				if(objRowDTO.getIdentifierCode() ==null || objRowDTO.getIdentifierCode().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Identifier Code Not Available" ;
					else
						errMsg =  "Identifier Code Not Available" ;
				}
			}else{
				if(objRowDTO.getChannelName()==null || objRowDTO.getChannelName().length()==0){
						errMsg =  "Channel Not Available" ;
				}
				if(objRowDTO.getSubChannelName() ==null || objRowDTO.getSubChannelName().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Sub Channel Not Available" ;
					else
						errMsg =  "Sub Channel Not Available" ;
				}
				if(objRowDTO.getTargetTypeName() ==null || objRowDTO.getTargetTypeName().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Target Type Not Available" ;
					else
						errMsg =  "Target Type Not Available" ;
				}
				if(objRowDTO.getEntityType() ==null || objRowDTO.getEntityType().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Position Type Not Available" ;
					else
						errMsg =  "Position Type Not Available" ;
				}
				if(objRowDTO.getOrgName() ==null || objRowDTO.getOrgName().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Organization Not Available" ;
					else
						errMsg =  "Organization Not Available" ;
				}
				if(objRowDTO.getIdentifierCode() ==null || objRowDTO.getIdentifierCode().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Identifier Code Not Available" ;
					else
						errMsg =  "Identifier Code Not Available" ;
				}
				if(objRowDTO.getOrgCode() ==null || objRowDTO.getOrgCode().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Organization Code Not Available" ;
					else
						errMsg =  "Organization Code Not Available" ;
				}
				if(objRowDTO.getAssignType() ==null || objRowDTO.getAssignType().length()==0){
					if(errMsg!=null)
						errMsg += "|" + "Assignment Type Not Available" ;
					else
						errMsg =  "Assignment Type Not Available" ;
				}
			}
			
			objConnection = getDbConnection();
			
			boolean validEntry = false;
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.VALIDATE_CHANNEL);
			objPStmt.setString(1, objRowDTO.getChannelName()) ;
			objResultSet=objPStmt.executeQuery();
			
			if (objResultSet.next()) {
				
				int chnlParty = objResultSet.getInt(1) ;
				if(chnlParty != targetsDTO.getChannelPartyId()){
					if(errMsg!=null)
						errMsg += "|" + "Channel Name do not match" ;
					else
						errMsg =  "Channel Name do not match" ;
				}else
					validEntry = true ;
			}else{
				if(errMsg!=null)
					errMsg += "|" + "Invalid Channel Name" ;
				else
					errMsg =  "Invalid Channel Name" ;
			}
					
			objResultSet.close();
			objPStmt.close();
			
			if(!validEntry)
				return errMsg ;
			if(targetsDTO.getSelectedTargetEntityType()!=null && (targetsDTO.getSelectedTargetEntityType().trim().equals("1")||targetsDTO.getSelectedTargetEntityType().trim().equals("2")||targetsDTO.getSelectedTargetEntityType().trim().equals("0"))){
				objPStmt = objConnection.prepareStatement("select party_id from party_name pn where lower(pn.ORG_NM) = lower(?) and pn.IS_DELETED_IND='N' and party_id =?");
				}
			else{
				objPStmt = objConnection.prepareStatement(ITargetQueries.VALIDATE_SUB_CHANNEL);
			}
		
			objPStmt.setString(1, objRowDTO.getSubChannelName()) ;
			if(targetsDTO.getSelectedTargetEntityType()!=null && (targetsDTO.getSelectedTargetEntityType().trim().equals("1")||targetsDTO.getSelectedTargetEntityType().trim().equals("2")||targetsDTO.getSelectedTargetEntityType().trim().equals("0"))){
			objPStmt.setInt(2, targetsDTO.getSubChannelPartyId()) ;
			}
			
			objResultSet=objPStmt.executeQuery();
			
			if (objResultSet.next()) {
				int chnlParty = objResultSet.getInt(1) ;
				if(chnlParty != targetsDTO.getSubChannelPartyId()){
					if(errMsg!=null)
						errMsg += "|" + "SubChannel Name do not match" ;
					else
						errMsg =  "Sub Channel Name do not match" ;
				}else
					validEntry = true ;
			}else{
				if(errMsg!=null)
					errMsg += "|" + "Invalid SubChannel Name" ;
				else
					errMsg =  "Invalid SubChannel Name" ;
			}
					
			objResultSet.close();
			objPStmt.close();
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.VALIDATE_TARGET_TYPE);
			objPStmt.setString(1, objRowDTO.getTargetTypeName()) ;
			objResultSet=objPStmt.executeQuery();
			
			if (objResultSet.next()) {
				int targTyp = objResultSet.getInt(1) ;
				if(targTyp != targetsDTO.getTargetTypeId()){
					if(errMsg!=null)
						errMsg += "|" + "Invalid Target Type" ;
					else
						errMsg =  "Invalid Target Type" ;
				}else
					validEntry = true ;
			}else{
				if(errMsg!=null)
					errMsg += "|" + "Invalid Target Type" ;
				else
					errMsg =  "Invalid Target Type" ;
			}
					
			objResultSet.close();
			objPStmt.close();
			/*Check Valid Entity Type */
			if(targetsDTO.getTargetTypeId()==1){
				if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
					objPStmt = objConnection.prepareStatement("select count(1) from ta_target_Def_det td,adm_party_role_type apr where apr.PARTY_ROLE_TYP_ID = td.geo_hierarchy_grp_id and td.is_active_ind='Y' and apr.is_deleted_ind='N' and apr.PARTY_ROLE_NM=? and td.ta_target_def_det_id = ?");		
				}
				else{
					objPStmt = objConnection.prepareStatement("select count(1) from ta_target_Def_det td, hierarchy_grp hg where hg.hierarchy_grp_id = td.geo_hierarchy_grp_id and td.is_active_ind='Y' and hg.is_deleted_ind='N' and hg.hierarchy_grp_nm=? and td.ta_target_def_det_id = ? ");	
				}
					
					objPStmt.setString(1, objRowDTO.getEntityType()) ;
					objPStmt.setInt(2, targetsDTO.getTargetDefDetId()) ;
					objResultSet=objPStmt.executeQuery();
					
					if (objResultSet.next()) {
						int targTyp = objResultSet.getInt(1) ;
						if(targTyp > 0){
							validEntry = true ;
						}
						else{
							if(errMsg!=null)
								errMsg += "|" + "Invalid Entity Type" ;
							else
								errMsg =  "Invalid Entity Type" ;
						}
							
					}else{
						if(errMsg!=null)
							errMsg += "|" + "Invalid Entity Type" ;
						else
							errMsg =  "Invalid Entity Type" ;
					}
							
					objResultSet.close();
					objPStmt.close();
			}else {
				objPStmt = objConnection.prepareStatement(" select count(1) from ta_target_Def_det td, adm_job_position_type ad " +
						" where ad.job_position_typ_id = td.human_pos_type_id and td.is_active_ind='Y' "  +
						" and ad.is_deleted_ind='N' and ad.job_position_typ_nm= ? and td.ta_target_def_det_id = ? ");
				objPStmt.setString(1, objRowDTO.getEntityType()) ;
				objPStmt.setInt(2, targetsDTO.getTargetDefDetId()) ;
				objResultSet=objPStmt.executeQuery();
				
				if (objResultSet.next()) {
					int targTyp = objResultSet.getInt(1) ;
					if(targTyp > 0){
						validEntry = true ;
					}
					else{
						if(errMsg!=null)
							errMsg += "|" + "Invalid Position Type" ;
						else
							errMsg =  "Invalid Position Type" ;
					}
						
				}else{
					if(errMsg!=null)
						errMsg += "|" + "Invalid Position Type" ;
					else
						errMsg =  "Invalid Position Type" ;
				}
						
				objResultSet.close();
				objPStmt.close();
			}
			if(!validEntry)
				return errMsg ;
			
			
			
			//Get a valid Party Id of Geo from PMS Code
			objPStmt = objConnection.prepareStatement("select pi.party_id from party_identifier pd inner join party_instance pi on " +
					" pd.party_id = pi.party_id and pi.is_Deleted_ind = 'N' and pd.is_Deleted_ind='N' and ( pi.inst_Status_id='0' or  pi.inst_Status_id is null ) " +
					" inner join adm_party_role_Type ad on ad.party_role_typ_id = pi.party_role_typ_id " +
					" where pd.identifier_value=? and ad.party_role_nm = ?" );
					
			objPStmt.setString(1, objRowDTO.getIdentifierCode()) ;
			objPStmt.setString(2, objRowDTO.getEntityType()) ;
			objResultSet=objPStmt.executeQuery();
			
			if (objResultSet.next()) {
				int entity = objResultSet.getInt(1) ;
				if(entity > 0){
					objRowDTO.setPartyId(entity);
					validEntry = true ;
				}
				else{
					validEntry = false ;
					if(errMsg!=null)
						errMsg += "|" + "Invalid CMS Code" ;
					else
						errMsg =  "Invalid CMS Code" ;
				}
					
			}else{
				validEntry = false;
				if(errMsg!=null)
					errMsg += "|" + "Invalid CMS Code" ;
				else
					errMsg =  "Invalid CMS Code" ;
			}
					
			objResultSet.close();
			objPStmt.close();
			
			if(!validEntry)
				return errMsg ;
			
			if(targetsDTO.getTargetTypeId() == 2){
			
				objPStmt = objConnection.prepareStatement("select pjp.party_id,pid.identifier_value from party_instance pi inner join party_job_position pjp on pjp.heldby_party_inst_id = pi.party_inst_id " + 
						" and pjp.status_id = '100022' and pjp.job_position_filled_dtm is not null and pjp.job_position_vacated_dtm is null " +
						" inner join adm_job_position_type ad on ad.job_position_typ_id = pjp.job_position_typ_id " +
						" inner join party_identifier pid on pid.party_id = pjp.party_id and pid.identifier_typ_id=1 " +
						" where pi.party_id = ? and ad.job_position_typ_nm = ?" );
					
			objPStmt.setInt(1, objRowDTO.getPartyId()) ;
			objPStmt.setString(2, objRowDTO.getEntityType()) ;
			objResultSet=objPStmt.executeQuery();
			
			int count = 0;
			while (objResultSet.next()) {
				int orgPartyId = objResultSet.getInt(1) ;				
				String orgCMSCode = objResultSet.getString(2);
				
				if(objRowDTO.getOrgCode().equalsIgnoreCase(orgCMSCode)){
					objRowDTO.setOrgPartyId(orgPartyId);
					validEntry = true ;
					count++;
					break;
				}									
			}
			
			if(count==0){
				validEntry = false ;
				if(errMsg!=null)
					errMsg += "|" + "Human Geo mismatch" ;
				else
					errMsg =  "Human Geo mismatch" ;
			}
					
			objResultSet.close();
			objPStmt.close();
			
			}
			
			
			//Get a valid Party Id of Geo from Org Name
			objPStmt = objConnection.prepareStatement("select org_nm from party_name where party_id= ?" );
			
			if(targetsDTO.getTargetTypeId() == 1)
				objPStmt.setInt(1, objRowDTO.getPartyId()) ;
			else
				objPStmt.setInt(1, objRowDTO.getOrgPartyId()) ;
			
			objResultSet=objPStmt.executeQuery();
			
			if (objResultSet.next()) {
				String  name = objResultSet.getString(1) ;
				if(name !=null && name.equalsIgnoreCase(objRowDTO.getOrgName()) ){
					
					validEntry = true ;
				}
				else{
					if(errMsg!=null)
						errMsg += "|" + "Invalid Geo Name" ;
					else
						errMsg =  "Invalid Geo Name" ;
				}
					
			}else{
				if(errMsg!=null)
					errMsg += "|" + "Invalid Geo Name" ;
				else
					errMsg =  "Invalid Geo Name" ;
			}
					
			objResultSet.close();
			objPStmt.close();
			
			if(targetsDTO.getTargetTypeId() == 2) {
				//Get a valid Party Id of Geo from Org Name
				objPStmt = objConnection.prepareStatement("select identifier_value from party_identifier where party_id= ? and identifier_typ_id=1" );
				
				objPStmt.setInt(1, objRowDTO.getOrgPartyId()) ;
				
				objResultSet=objPStmt.executeQuery();
				
				if (objResultSet.next()) {
					String  name = objResultSet.getString(1) ;
					if(name !=null && name.equalsIgnoreCase(objRowDTO.getOrgCode()) ){
						
						validEntry = true ;
					}
					else{
						if(errMsg!=null)
							errMsg += "|" + "Invalid Geo Code" ;
						else
							errMsg =  "Invalid Geo Code" ;
					}
						
				}else{
					if(errMsg!=null)
						errMsg += "|" + "Invalid Geo Code" ;
					else
						errMsg =  "Invalid Geo Code" ;
				}
						
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return errMsg;
	}
	public boolean  saveFailedRecordDetails(TargetUploadDTO objTargetUploadDTO)	throws PSSException {
		final String STRMETHODNAME = "saveFailedRecordDetails";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		boolean flag = true ;
		try {
			objConnection = getDbConnection();
			 
				int processLogid = super.getMaxId("TARGET_UPLOAD_PROCESS_LOG");
				objPStmt = objConnection
				.prepareStatement("insert into Target_Upload_Process_Log (target_upload_log_id, target_upload_process_id, record_id, error_message, error_details, lst_updt_usrid, lst_updt_dtm, is_deleted_ind ) values(?,?,?,?,?,?,?,?)");
				objPStmt.setInt(1, processLogid);
				objPStmt.setInt(2, objTargetUploadDTO.getProcessId());
				objPStmt.setInt(3, objTargetUploadDTO.getRecordCount());
				objPStmt.setString(4, objTargetUploadDTO.getErrorMsg()) ; 
				objPStmt.setString(5, objTargetUploadDTO.getIdentifierCode()) ; 
				objPStmt.setString(6, objTargetUploadDTO.getUploadUserId());
				objPStmt.setTimestamp(7, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(8, "N"); 
				
				objPStmt.executeUpdate();
				
				if(null!=objPStmt)
					objPStmt.close();
								
				if(null!=objConnection)
					objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return flag;
	}
	public boolean  saveSuccessRecord(TargetUploadDTO objTargetUploadDTO, TargetsDTO targetsDTO)	throws PSSException {
		final String STRMETHODNAME = "saveSuccessRecord";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		boolean flag = true ;
		try {
			if(objTargetUploadDTO.getParamList()!=null && objTargetUploadDTO.getParamList().size()>0){
				int paramHdr = 0 ;
				updateHdrDetIfDuplicate(objTargetUploadDTO, targetsDTO) ;
				paramHdr = insertTargetUploadHdr(objTargetUploadDTO, targetsDTO) ;
				if(paramHdr>0){
					for(int i=0;i<objTargetUploadDTO.getParamList().size();i++ ){
						TargetUploadDTO objDTO = (TargetUploadDTO)objTargetUploadDTO.getParamList().get(i) ;
						objDTO.setUploadUserId(targetsDTO.getLstUpdtUserId());
						int detId = insertTargetUploadDet(objDTO, paramHdr);
						LogUtil.info(STRCLASSNAME, STRMETHODNAME, "HdrId, DetId", paramHdr+" : " + detId);
					}
				}
				else
					flag = false ;
			}
			
		}  catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return flag;
	}
	public int  insertTargetUploadHdr(TargetUploadDTO objTargetUploadDTO, TargetsDTO targetsDTO)	throws PSSException {
		final String STRMETHODNAME = "insertTargetUploadHdr";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		boolean flag = false ;
		int paramHdrId = 0 ;
		try {
			objConnection = getDbConnection();
			 
				paramHdrId = super.getMaxId("TARGET_PARAMETER_UPLOAD_HDR");
				/*objPStmt = objConnection
				.prepareStatement("insert into TARGET_PARAMETER_UPLOAD_HDR (Target_Param_Upload_Hdr_id, Target_Upload_Process_id, Channel_party_Id, subchannel_party_id, target_type_id, party_id, ta_target_def_det_id, org_party_id, assignment_type,ta_frequency_id, UploadFor, fin_year, lst_updt_usrid, lst_updt_dtm, is_deleted_ind ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
				*/
				if(targetsDTO.getSelectedOrgType()!=null && targetsDTO.getSelectedOrgType().trim().equals("1")){
					objPStmt = objConnection
							.prepareStatement("insert into TARGET_PARAMETER_UPLOAD_HDR (Target_Param_Upload_Hdr_id, Target_Upload_Process_id, Channel_party_Id, subchannel_party_id, target_type_id, party_id, ta_target_def_det_id, org_party_id, assignment_type,ta_frequency_id, UploadFor, fin_year, lst_updt_usrid, lst_updt_dtm, is_deleted_ind ) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
									
				}
				else if(targetsDTO.getSelectedOrgType()!=null && targetsDTO.getSelectedOrgType().trim().equals("2")){
					objPStmt = objConnection
							.prepareStatement("insert into TARGET_PARAMETER_UPLOAD_HDR (Target_Param_Upload_Hdr_id, Target_Upload_Process_id, Channel_party_Id, subchannel_party_id, target_type_id, party_id, ta_target_def_det_id, org_party_id, assignment_type,ta_frequency_id, UploadFor, fin_year, lst_updt_usrid, lst_updt_dtm, is_deleted_ind,Target_Entity_Party_Type,Geo_Unit_Type,ENTITY_PARTY_TYPE) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
					
					
				}
						
				objPStmt.setInt(1, paramHdrId);
				objPStmt.setInt(2, objTargetUploadDTO.getProcessId());
				objPStmt.setInt(3, targetsDTO.getChannelPartyId());
				objPStmt.setInt(4, targetsDTO.getSubChannelPartyId()) ; 
				objPStmt.setInt(5, targetsDTO.getTargetTypeId()) ; 
				objPStmt.setInt(6, objTargetUploadDTO.getPartyId()) ; 
				objPStmt.setInt(7, targetsDTO.getTargetDefDetId()) ; 
				if( objTargetUploadDTO.getOrgPartyId()> 0)
					objPStmt.setInt(8, objTargetUploadDTO.getOrgPartyId()) ;
				else
					objPStmt.setNull(8, Types.INTEGER);
				if(objTargetUploadDTO.getAssignType()!=null)
				objPStmt.setString(9, objTargetUploadDTO.getAssignType()) ;
				else
					objPStmt.setNull(9, Types.VARCHAR) ;
				objPStmt.setInt(10, targetsDTO.getReviewFreqId()) ; 
				objPStmt.setString(11, targetsDTO.getUploadFor()) ; 
				objPStmt.setString(12, targetsDTO.getFinancialYear()) ; 
				objPStmt.setString(13, targetsDTO.getLstUpdtUserId());
				objPStmt.setTimestamp(14, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(15, "N");
				if(targetsDTO.getSelectedOrgType()!=null && targetsDTO.getSelectedOrgType().trim().equals("2")){
					objPStmt.setString(16, targetsDTO.getSelectedTargetEntityType());
					if(targetsDTO.getSelectedTargetEntityType()!=null && (targetsDTO.getSelectedTargetEntityType().trim().equals("1"))){
						objPStmt.setString(17, targetsDTO.getTargetEntity()+"");		
					}
					else
					{
						objPStmt.setString(17, targetsDTO.getEntityName());	
					}
					if(targetsDTO.getSelectedTargetEntityType()!=null && (targetsDTO.getSelectedTargetEntityType().trim().equals("1"))){
						objPStmt.setNull(18, Types.VARCHAR);	
					}
					else
					{
						objPStmt.setInt(18, targetsDTO.getTargetEntity());	
					}	
					
				}
			
				objPStmt.executeUpdate();
				
				if(null!=objPStmt)
					objPStmt.close();
								
				if(null!=objConnection)
					objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return paramHdrId;
	}
	public int  insertTargetUploadDet(TargetUploadDTO objTargetUploadDTO, int paramHdrId)	throws PSSException {
		final String STRMETHODNAME = "insertTargetUploadHdr";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		boolean flag = false ;
		int paramDetId = 0 ;
		try {
			objConnection = getDbConnection();
			 
				paramDetId = super.getMaxId("TARGET_PARAMETER_UPLOAD_DET");
				objPStmt = objConnection
				.prepareStatement("insert into TARGET_PARAMETER_UPLOAD_DET (Target_Parameter_Upload_Det_id, Target_Param_Upload_Hdr_id, parameter_Id, target_value, lst_updt_usrid, lst_updt_dtm, is_deleted_ind ) values(?,?,?,?,?,?,?)");
				objPStmt.setInt(1, paramDetId);
				objPStmt.setInt(2, paramHdrId);
				objPStmt.setString(3, objTargetUploadDTO.getParameterName()) ; 
				if(objTargetUploadDTO.getParameterValue()!=null && !objTargetUploadDTO.getParameterValue().trim().equals("")){
					objPStmt.setString(4, objTargetUploadDTO.getParameterValue()) ;
				}
				else{
					objPStmt.setNull(4, Types.VARCHAR) ;
				}				 
				objPStmt.setString(5, objTargetUploadDTO.getUploadUserId());
				objPStmt.setTimestamp(6, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(7, "N");
				
				objPStmt.executeUpdate();
				
				if(null!=objPStmt)
					objPStmt.close();
								
				if(null!=objConnection)
					objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return paramDetId;
	}
	public int  updateHdrDetIfDuplicate(TargetUploadDTO objTargetUploadDTO, TargetsDTO targetsDTO)	throws PSSException {
		final String STRMETHODNAME = "updateHdrDetIfDuplicate";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		boolean flag = false ;
		int paramHdrId = 0 ;
		try {
			objConnection = getDbConnection();
			 
			int paramHdrid = 0 ;
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_HDR);
					
			objPStmt.setInt(1, targetsDTO.getTargetDefDetId());
			objPStmt.setString(2, targetsDTO.getTargetStartMon());
			objPStmt.setString(3, targetsDTO.getFinancialYear());
			objPStmt.setInt(4, objTargetUploadDTO.getPartyId());
			
			objResultSet = objPStmt.executeQuery();
			if(objResultSet.next()){
				paramHdrid = objResultSet.getInt(1);
			}
				objResultSet.close() ;
				if(null!=objPStmt)
					objPStmt.close();
			if(paramHdrid>0){
				
						objPStmt = objConnection
						.prepareStatement("Update target_parameter_upload_hdr Set Lst_Updt_UsrId=?,Lst_Updt_Dtm=?,Is_Deleted_Ind='Y' where target_param_upload_hdr_id=?");
				
						objPStmt.setString(1, targetsDTO.getLstUpdtUserId());
						objPStmt.setTimestamp(2, CommonUtils.getCurrentTimeStamp());
						objPStmt.setInt(3, paramHdrid) ;
						objPStmt.executeUpdate();
						objPStmt.close();
						
						objPStmt = objConnection
								.prepareStatement("Update target_parameter_upload_Det Set Lst_Updt_UsrId=?,Lst_Updt_Dtm=?,Is_Deleted_Ind='Y' where target_param_upload_hdr_id=?");
						
								objPStmt.setString(1, targetsDTO.getLstUpdtUserId());
								objPStmt.setTimestamp(2, CommonUtils.getCurrentTimeStamp());
								objPStmt.setInt(3, paramHdrid) ;
								objPStmt.executeUpdate();
								objPStmt.close();
			}
								
				if(null!=objConnection)
					objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return paramHdrId;
	}
	public String  updateUploadRecordDetails(TargetsDTO  objTargetsDTO)	throws PSSException {
		final String STRMETHODNAME = "updateUploadRecordDetails";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		String resultMsg="";
		try {
			objConnection = getDbConnection();
				//For insertion
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
				objPStmt = objConnection
				.prepareStatement("Update TARGET_UPLOAD_PROCESS Set PROCESS_END_TIME=?,Status_Id=?,Total_Records=?,Error_Records=?,Valid_Records=?,Lst_Updt_UsrId=?,Lst_Updt_Dtm=?,Is_Deleted_Ind='N' where TARGET_UPLOAD_PROCESS_ID=?");
				objPStmt.setTimestamp(1, CommonUtils.getCurrentTimeStamp());
				objPStmt.setString(2, objTargetsDTO.getStatus());
				objPStmt.setInt(3, objTargetsDTO.getValidRecords()+objTargetsDTO.getFailedRecords());
				objPStmt.setInt(4, objTargetsDTO.getFailedRecords());
				objPStmt.setInt(5, objTargetsDTO.getValidRecords());
				objPStmt.setString(6, objTargetsDTO.getLstUpdtUserId());
				objPStmt.setTimestamp(7, CommonUtils.getCurrentTimeStamp());
				objPStmt.setInt(8, objTargetsDTO.getProcessId()) ;
				objPStmt.executeUpdate();
				objPStmt.close();
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
			if(null!=objPStmt)
				objPStmt.close();
			if(null!=objConnection)
				objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return resultMsg;
	}
	
	public ArrayList getUploadForList(TargetsDTO targetsDTO) throws PSSException {

		final String STRMETHODNAME = "getUploadForList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);	
		
		ArrayList arrList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {			
			
			if(targetsDTO.getReviewFreqId()==1){
				commonDTO = new CommonDTO();
				commonDTO.setId("Yearly");
				commonDTO.setDesc("Yearly");
				arrList.add(commonDTO);
			}
			else if(targetsDTO.getReviewFreqId()==2){
				commonDTO = new CommonDTO();
				commonDTO.setId("Half Yearly 1");
				commonDTO.setDesc("Half Yearly 1");
				arrList.add(commonDTO);
				
				commonDTO = new CommonDTO();
				commonDTO.setId("Half Yearly 2");
				commonDTO.setDesc("Half Yearly 2");
				arrList.add(commonDTO);
			}
			else if(targetsDTO.getReviewFreqId()==3){
				for(int i=1;i<=4;i++){
					commonDTO = new CommonDTO();
					commonDTO.setId("Q"+i);
					commonDTO.setDesc("Q"+i);
					arrList.add(commonDTO);
				}				
			}
			else if(targetsDTO.getReviewFreqId()==4){
				arrList = this.getTargetMonthList();
			}					
			
			
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} 
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrList;
	}
	
	public ArrayList getErrorRecordsList(String processId,ArrayList arrReportHeaders, HashMap hmapReportColumns)throws PSSException
	{
		final String STRMETHODNAME = "getErrorRecordsList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " Begin:");
		ArrayList arrRecordsType = null;
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSetMetaData rsmd =  null;
		HashMap hmap= null;
		String strColumnName="";
		String strColumnKeyName="";
		int columnCount=0;
		int headerCount=0;
		boolean isValidColumn = false;
		try {
			arrRecordsType=new ArrayList();
			objConnection = getDbConnection();
			objPStmt = objConnection.prepareStatement("select target_upload_process_id as PROCESS_ID,RECORD_ID,ERROR_MESSAGE,error_details as DETAILS from Target_Upload_Process_Log where target_upload_process_id=? order by RECORD_ID");
			objPStmt.setString(1, processId);
			objResultSet = objPStmt.executeQuery();
			while(objResultSet.next()){
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " objResultSet Start:");
				rsmd = objResultSet.getMetaData();
				columnCount = rsmd.getColumnCount();
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "columnCount:"+columnCount);
				hmap = new HashMap();
				int j=0;
				if(null!=arrReportHeaders && arrReportHeaders.size()>0)
				{
					headerCount = arrReportHeaders.size();
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "headerCount:"+headerCount);
				}
				for(int i=1;i<=columnCount;i++)
				{
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "i Count:"+i);
					strColumnName=(String)rsmd.getColumnName(i);
					if(hmapReportColumns.containsKey(strColumnName))
					{   
						LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Inside Hashmap:Begin:i Count:"+i+":headerCount:"+headerCount+":j:"+j);
						if(j<headerCount){
							strColumnKeyName = (String)arrReportHeaders.get(j);            			
							LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "","Column Name:"+strColumnName+":is present in the HashMap:");
							LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "","Query Resultset Column Name:"+strColumnName+ ":Headers Column Name:"+strColumnKeyName+":objResultSet.getString(i):"+objResultSet.getString(i));
							String str = objResultSet.getString(i);
							if(str!=null && !str.equals("") && str.contains(",")){
								//For avoiding values fetching in next column in excel file when using comma(,).
								str = "\"" + str + "\"";
							}
							hmap.put(strColumnKeyName,str); 
							j=j+1;
						}
						LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Inside Hashmap:End:i Count:"+i+":headerCount:"+headerCount+":j:"+j);
					}else{
						LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Outside Hashmap::i Count:"+i+"Column Name:"+strColumnName+":is not present in the HashMap:");
					}
				}
				arrRecordsType.add(hmap);            	            	
			} 
			objResultSet.close();
			objPStmt.close();
			objConnection.close();
			if(null!= arrRecordsType)
			{
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " arrRecordsType:"+arrRecordsType.toString());
			}
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
					"BaseDAOException" + _ex.getMessage());
			_ex.printStackTrace();
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
					"SQLException " + _ex.getMessage());
			_ex.printStackTrace();
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
					"Exception " + _ex.getMessage());
			_ex.printStackTrace();
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrRecordsType;
	}
	
	public int  getFailedRecordCount(String processId)	throws PSSException {
		final String STRMETHODNAME = "getFailedRecordCount:::::::";
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSet objResultSet = null;
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		int count=0;
		try {
			objConnection = getDbConnection();
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_ERROR_COUNT);
			objPStmt.setString(1,processId);
			objResultSet = objPStmt.executeQuery();
			if (objResultSet.next()) {
				 count=objResultSet.getInt("error_records");
				LogUtil.info("error record count:::::::::"+count);
			}
			if(null!=objResultSet){
				objResultSet.close();}
			if(null!=objPStmt)
				objPStmt.close();
			if(null!=objConnection)
				objConnection.close();
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			_ex.getRootCause().printStackTrace();
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getErrorCode());
				_ex.getRootCause().printStackTrace();
				throw new PSSException(_ex, _ex.getErrorCode(), true);
			}
		}
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return count;
	}
	
	public int getReviewFrequency(TargetsDTO objTargetsDTO) throws PSSException {

		final String STRMETHODNAME = "getReviewFrequency";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		int reviewFreqId = 0;		
		
		try {
			objConnection = getDbConnection();		
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_REVIEW_FREQUENCY);
			objPStmt.setInt(1, objTargetsDTO.getTargetDefHdrId());
			objResultSet = objPStmt.executeQuery();
			if(objResultSet.next()){
				reviewFreqId = objResultSet.getInt(1);
			}
			objPStmt.close();		
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return reviewFreqId;
	}
	//Added for SUD by Niti-----Starts
	public AchievementDTO getTargetAchievement(AchievementDTO objAchievementDTO ,UserContextVO objUserContextVO) throws PSSException {
		final String STRMETHODNAME = "getTargetAchievement";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		try {
			ArrayList arrMonth = new ArrayList();
		   String[] months = new DateFormatSymbols().getMonths();
		   for(int month = 1; month <= 12; month++) {
			   CommonDTO monthDTO = new CommonDTO();
			   monthDTO.setId(months[month-1]);
			   monthDTO.setDesc(months[month-1]);
			   arrMonth.add(monthDTO);
		   }
		   objAchievementDTO.setArrMonth(arrMonth);	
		
		ArrayList arrYear = new ArrayList();
		   Calendar yearCal = Calendar.getInstance();
		   int yearVal = yearCal.get(Calendar.YEAR);
		   for(int year = 1; year <= 5; year++) {
		    CommonDTO yearDTO = new CommonDTO();
		    yearDTO.setId(yearVal + "");
		    yearDTO.setDesc(yearVal + "");
		    arrYear.add(yearDTO);
		    yearVal++;
		   }
		   objAchievementDTO.setArrYear(arrYear);
		   
		   
		   if(objAchievementDTO.getMonth() == null && objAchievementDTO.getYear() == null) {
			   Calendar cal = Calendar.getInstance();
			   objAchievementDTO.setMonth(String.valueOf(cal.get(Calendar.MONTH) + 1));
			   objAchievementDTO.setYear(String.valueOf(cal.get(Calendar.YEAR)));
		   }
		   
		   String strMonth = "";
		   for(int i=1; i<=12; i++){
			   if(months[i-1].equals(objAchievementDTO.getMonth())){
				   strMonth = String.valueOf(i);
				   break;
			   }
		   }
		   
		   ArrayList arrPosition = new ArrayList();
		   objConnection = getDbConnection();	
		   
		   if(objAchievementDTO.getMonth() != null && objAchievementDTO.getMonth().length() > 0 && objAchievementDTO.getYear() != null && objAchievementDTO.getYear().length() > 0) {
			
			String range = "01/";
			if(strMonth.length() == 1) {
				range += "0";
			}
			range += strMonth + "/" + objAchievementDTO.getYear();
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_POSITIONS);
			objPStmt.setInt(1, objUserContextVO.getUserPartyId());
			objPStmt.setString(2, range);
			objPStmt.setString(3, range);
			objResultSet = objPStmt.executeQuery();
			while(objResultSet.next()){
				CommonDTO positionDTO = new CommonDTO();
				positionDTO.setId(objResultSet.getString(1));
				positionDTO.setDesc(objResultSet.getString(2));
				arrPosition.add(positionDTO);
			}
			objPStmt.close();		
			
			if (objConnection != null) {
				objConnection.close();
			}
			
			objAchievementDTO.setArrPosition(arrPosition);
			
		   }
			
		}catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
			
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		   
		 return objAchievementDTO;  
	}
	public ArrayList<TargetsCommonDTO> getParameterList() throws PSSException
	{
		final String STRMETHODNAME = "getParameterList";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ArrayList<TargetsCommonDTO> parameterList =null;
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		ResultSetMetaData objMetaData = null;
		int colCount=0;
		TargetsCommonDTO objCommonDTO =null;
		String query=null;
		try{
			objConnection =getDbConnection();
			objPStmt =objConnection.prepareStatement(ITargetQueries.GET_TA_TICKLER_QUERY);
			objResultSet = objPStmt.executeQuery();
			if(objResultSet !=null && objResultSet.next())
			{
				query =objResultSet.getString(1);
			}
			if(objResultSet !=null)
				objResultSet.close();
			if(objPStmt !=null)
				objPStmt.close();
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "query::::",query);
			if(query !=null && !query.equals(""))
			{
				objPStmt = objConnection.prepareStatement(query);
				objResultSet = objPStmt.executeQuery();
				if(objResultSet !=null)
				{
					objMetaData=objResultSet.getMetaData();
					colCount=objMetaData.getColumnCount();
					if(colCount>0)
					{
						parameterList = new ArrayList<TargetsCommonDTO>();
						for(int i=1;i<=colCount;i++){
							objCommonDTO = new TargetsCommonDTO();
							objCommonDTO.setDesc(objMetaData.getColumnName(i));
							objCommonDTO.setId(objMetaData.getColumnTypeName(i));
							objCommonDTO.setSqlType(objMetaData.getColumnType(i));
							parameterList.add(objCommonDTO);
						}
						objCommonDTO = new TargetsCommonDTO();
						objCommonDTO.setDesc("startDate");
						objCommonDTO.setId("date");
						objCommonDTO.setSqlType(91);
						parameterList.add(objCommonDTO);
						objCommonDTO = new TargetsCommonDTO();
						objCommonDTO.setDesc("endDate");
						objCommonDTO.setId("date");
						objCommonDTO.setSqlType(91);
						parameterList.add(objCommonDTO);
					}
				}
			}
		}catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
			
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.END_FOR_LOG);
		return parameterList;
	}
	public QueryInfoDTO testRuleQuery(TargetsDTO objTargetsDTO,QueryInfoDTO derivedQuery) throws PSSException{
		final String STRMETHODNAME = ":testRuleQuery:";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
		Connection connection = null;
		ResultSet objResultSet = null;
		ResultSet objResultSet1 = null;
		PreparedStatement objPStmt = null;
		ArrayList<TargetsCommonDTO> derivedColumns = new ArrayList<TargetsCommonDTO>();		
		String query="";String mapingFields=null;
		String[] mapedField = null;
		String[] subMapedField = null;		
		ArrayList paramSelected = new ArrayList();
		ArrayList paramSelectedList = new ArrayList();
		String strParamSelected=null;
		ArrayList eventSelected = new ArrayList();
		ArrayList list = new ArrayList();
		ArrayList lobList=new ArrayList();
		HashMap<String,String> mappeFieldsHasMap=new HashMap<String,String>();
		try{
			connection=getDbConnection();
			mapingFields= objTargetsDTO.getTargetRuleMappedColumns();		
			if(mapingFields!=null && !mapingFields.trim().equals("")){
				String[] keyValuePairs = mapingFields.split(",");             
				for(String pair : keyValuePairs)                       
				{
				    String[] entry = pair.split("~");                  
				    mappeFieldsHasMap.put(entry[0].trim(), entry[1].trim()); 				  
				   
				} 
			}	
			query= derivedQuery.getTestQuery();	
			query ="select * from ("+query+") where 1<>1";
			list=derivedQuery.getParams();
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Derived Query::::::", query);
			objPStmt = connection.prepareStatement(query);
			if(list !=null && list.size()>0){
				for(int i=0 ;i<list.size();i++){
					String key=list.get(i).toString().trim();
					if(objTargetsDTO !=null && objTargetsDTO.getParameterColumnList() !=null && objTargetsDTO.getParameterColumnList().size()>0)
					{
						for(int j=0;j<objTargetsDTO.getParameterColumnList().size();j++){
							TargetsCommonDTO objCommonDTO =objTargetsDTO.getParameterColumnList().get(j);
							if(objCommonDTO !=null && objCommonDTO.getDesc() !=null && objCommonDTO.getDesc().equalsIgnoreCase(key)){
								objPStmt.setNull(i+1, objCommonDTO.getSqlType());
								break;
							}
						}
						
					}
					
				}
			}
			objResultSet = objPStmt.executeQuery();
			if (objResultSet!=null) {
			     ResultSetMetaData objMetaData = objResultSet.getMetaData();
				 int colCount = objMetaData.getColumnCount();
				 for(int i=1;i<=colCount;i++){
					 TargetsCommonDTO dto = new TargetsCommonDTO();
					 dto.setQuery("O");
					 dto.setDesc(objMetaData.getColumnName(i));
					 dto.setId(objMetaData.getColumnTypeName(i));					
					 if(!mappeFieldsHasMap.isEmpty()){
						 String tempString=objMetaData.getColumnName(i);
					   dto.setParamName(mappeFieldsHasMap.get(tempString)); 
					 }
					 derivedColumns.add(dto);
				 }			
			 }
		derivedQuery.setInOrOutParamList(derivedColumns);
		 if (objResultSet != null) {
				objResultSet.close();
			}
	
			if (objPStmt != null) {
				objPStmt.close();
			}	
			if (connection != null) {
				connection.close();
			}
		 }catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				objTargetsDTO.setErrMsg(IConstants.PROVIDE_VALID_QUERY_DETAILS);
				throw new PSSException("errors.DerivedQry.invalid");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, connection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End ");
			return derivedQuery;
	}
	public HashMap<String, Integer> saveRuleQuery(TargetsDTO obTargetsDTO,String userid) throws PSSException
	{
		final String STRMETHODNAME = ":saveRuleQuery:";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
		Connection objConnection = null;
		ResultSet objResultSet = null;
		PreparedStatement objPStmt = null;
		HashMap<String, Integer> ruleIdMap=null;
		QueryInfoDTO objQueryInfoDTO =null;
		int ruleQryMax=0;
		int ruleParamMax=0;
		String targetTableName=null;
		String tableName=null;
		HashMap<String,String> mappeTableHasMap=new HashMap<String,String>();
		try{
			if(obTargetsDTO !=null && obTargetsDTO.getRuleQueryInfo() !=null && obTargetsDTO.getRuleQueryInfo().size()>0)
			{
				objConnection=getDbConnection();
				ruleIdMap = new HashMap<String, Integer>();
				for(String key : obTargetsDTO.getRuleQueryInfo().keySet())
				{
					objQueryInfoDTO =obTargetsDTO.getRuleQueryInfo().get(key);
					if(objQueryInfoDTO !=null ){
						ruleQryMax=super.getMaxId(ITargetConstants.TA_RULE_QUERY);
						objPStmt = objConnection.prepareStatement(ITargetQueries.INSERT_TA_RULE_QUERY);
						objPStmt.setInt(1, ruleQryMax);
						objPStmt.setString(2, objQueryInfoDTO.getRawQuery());
						objPStmt.setString(3, objQueryInfoDTO.getQuery());
						objPStmt.setString(4, userid);
						objPStmt.setTimestamp(5, CommonUtils.getCurrentTimeStamp());
						objPStmt.setString(6, objQueryInfoDTO.getQueryName());
						if(ruleQryMax>0){
							if(objQueryInfoDTO!=null && objQueryInfoDTO.getQueryName()!=null){
								targetTableName=IConstants.TA_RULE_PARAM_TABLE_PREFIX;
								tableName=objQueryInfoDTO.getQueryName();					
								tableName=tableName.trim().length()>=5?tableName.substring(0, 5):tableName;
								tableName=targetTableName+"_"+tableName+"_"+ruleQryMax;
							}
							
							 mappeTableHasMap.put(ruleQryMax+"", tableName); 	
						}
						objPStmt.setString(7, tableName);
						int row=objPStmt.executeUpdate();
						if(objPStmt !=null)
							objPStmt.close();
						if(row>0)
						{
							if(objQueryInfoDTO.getInOrOutParamList() !=null && objQueryInfoDTO.getInOrOutParamList().size()>0)
							{
								objPStmt=objConnection.prepareStatement(ITargetQueries.INSERT_TA_RULE_PARAM);
								int outIndex=0;
								int inIndex=0;
								int seqNo=0;
								for(int i=0;i<objQueryInfoDTO.getInOrOutParamList().size();i++)
								{
									ruleParamMax=super.getMaxId(ITargetConstants.TA_RULE_QUERY_PARAM);
									if(objQueryInfoDTO.getInOrOutParamList().get(i).getQuery() !=null && objQueryInfoDTO.getInOrOutParamList().get(i).getQuery().equalsIgnoreCase("I")){
										inIndex++;
										seqNo=inIndex;
									}
									else if(objQueryInfoDTO.getInOrOutParamList().get(i).getQuery() !=null && objQueryInfoDTO.getInOrOutParamList().get(i).getQuery().equalsIgnoreCase("O")){
										outIndex++;
										seqNo=outIndex;
									}
									objPStmt.setInt(1, ruleParamMax);
									objPStmt.setInt(2, ruleQryMax);
									objPStmt.setInt(3, seqNo);
									objPStmt.setString(4, objQueryInfoDTO.getInOrOutParamList().get(i).getDesc());
									objPStmt.setString(5, objQueryInfoDTO.getInOrOutParamList().get(i).getQuery());
									objPStmt.setTimestamp(6, CommonUtils.getCurrentTimeStamp());
									objPStmt.setString(7, userid);
									objPStmt.setString(8, objQueryInfoDTO.getInOrOutParamList().get(i).getId());
									objPStmt.setString(9, objQueryInfoDTO.getInOrOutParamList().get(i).getParamName());
									objPStmt.addBatch();
									
								}
								objPStmt.executeBatch();
								if(objPStmt !=null)
									objPStmt.close();
							}
						}
						ruleIdMap.put(key, ruleQryMax);
						//String result=alterTargetRuleParamTable(ruleQryMax,tableName);
					}
				}
				
			}
			obTargetsDTO.setTargetRuleParamTableList(mappeTableHasMap);
			
		}catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return ruleIdMap;
	}
	public HashMap<String, QueryInfoDTO> getTaRuleQueryInfo(TargetsDTO targetsDTO) throws PSSException
	{
		final String STRMETHODNAME = ":getTaRuleQueryInfo:";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
		Connection objConnection = null;
		ResultSet objResultSet = null;
		PreparedStatement objPStmt = null;
		QueryInfoDTO objInfoDTO =null;
		int ruleQryId=0;
		ArrayList<TargetsCommonDTO> objList = null;
		HashMap<String, QueryInfoDTO> objHashMap =null;
		String paramId=null;
		ResultSet objResultSet1 = null;
		PreparedStatement objPStmt1 = null;
		try{
			objConnection =getDbConnection();
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TA_RULE_QUERY);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
			objPStmt.setInt(2, targetsDTO.getTargetEntity());
			objPStmt.setInt(3, targetsDTO.getTargetEntity());
			objResultSet = objPStmt.executeQuery();
			if(objResultSet !=null  )
			{
				objHashMap =new HashMap<String, QueryInfoDTO>();
				while(objResultSet.next()){
					objInfoDTO = new QueryInfoDTO();
					objInfoDTO.setQueryName(objResultSet.getString("TA_RULE_QUERY_NM"));
					objInfoDTO.setRawQuery(objResultSet.getString("TA_RULE_QUERY"));
					ruleQryId=objResultSet.getInt("TA_RULE_QUERY_ID");
					paramId=objResultSet.getString("TA_PARAMETER_ID");
					if(ruleQryId>0)
					{
						objPStmt1 = objConnection.prepareStatement(ITargetQueries.GET_TA_RULE_PARAM);
						objPStmt1.setInt(1, ruleQryId);
						objResultSet1=objPStmt1.executeQuery();
						if(objResultSet1 !=null)
						{
							objList= new ArrayList<TargetsCommonDTO>();
							while(objResultSet1.next())
							{
								TargetsCommonDTO objDto= new TargetsCommonDTO();
								objDto.setDesc(objResultSet1.getString("TA_RULE_QUERY_PARAM_NM"));
								objDto.setId(objResultSet1.getString("DATA_TYPE"));
								objDto.setQuery(objResultSet1.getString("TA_RULE_QUERY_PARAM_TYP"));
								objDto.setParamName(objResultSet1.getString("ACHV_COL_NAME"));								 
								objList.add(objDto);
							}
							objInfoDTO.setInOrOutParamList(objList);
						}
						if(objResultSet1 !=null)
							objResultSet1.close();
						if(objPStmt1 !=null)
							objPStmt1.close();
					}
					if(paramId !=null)
						objHashMap.put(paramId, objInfoDTO);
				}
			}
			
			
		}catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return objHashMap;
	}
	
	//Added For TA Partner Addition starts -Saradha
	public ArrayList getChannelTypesByRole(String pathRef) throws PSSException {

		final String STRMETHODNAME = "getChannelTypes";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrChannelList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();

			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_CHANNEL_TYPE_BY_ROLE);
			objPStmt.setString(1, pathRef);
			objResultSet=objPStmt.executeQuery();

			if (null != objResultSet) {
				while (objResultSet.next()) {
					commonDTO = new CommonDTO();
					commonDTO.setId(objResultSet.getString(1));
					commonDTO.setDesc(objResultSet.getString(2));
					arrChannelList.add(commonDTO);
				}
			}
						
			objResultSet.close();
			objPStmt.close();
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrChannelList;
	}
	public ArrayList getSubChannelListByRole(String pathRef) throws PSSException {

		final String STRMETHODNAME = "getSubChannelListByRole";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		
		ArrayList arrSubChannelList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
			String qry = ITargetQueries.GET_SUB_CHANNEL_TYPE_BY_ROLE;
			
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_SUB_CHANNEL_TYPE_BY_ROLE);
				
				objPStmt.setString(1, pathRef);
				objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrSubChannelList.add(commonDTO);
					}
				}
							
				objResultSet.close();
				objPStmt.close();
			
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrSubChannelList;
	}
	public ArrayList getChannelNameBySubChannel(int partyid) throws PSSException {

		final String STRMETHODNAME = "getChannelNameBySubChannel";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		int subChannelPartyId=0;
		ArrayList arrSubChannelList = new ArrayList();
		CommonDTO commonDTO = null; 
		try {
			objConnection = getDbConnection();
			String qry = ITargetQueries.GET_CHANNEL_BYSUBCHANNELID;
			
			if(partyid> 0){
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_CHANNEL_BYSUBCHANNELID);
				objPStmt.setInt(1, partyid);				
				objResultSet=objPStmt.executeQuery();

				if (null != objResultSet) {
					while (objResultSet.next()) {
						commonDTO = new CommonDTO();
						commonDTO.setId(objResultSet.getString(1));
						commonDTO.setDesc(objResultSet.getString(2));
						arrSubChannelList.add(commonDTO);
					}
				}
							
				objResultSet.close();
				objPStmt.close();
			}
			
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return arrSubChannelList;
	}
	
	public int getTaRuleQueryInformation(TargetsDTO targetsDTO,String paramId) throws PSSException
	{
		final String STRMETHODNAME = ":getTaRuleQueryInformation:";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
		Connection objConnection = null;
		ResultSet objResultSet = null;
		PreparedStatement objPStmt = null;
		QueryInfoDTO objInfoDTO =null;
		int ruleQryId=0;
		ArrayList<CommonDTO> objList = null;
		int paramCount=0;		
		ResultSet objResultSet1 = null;
		PreparedStatement objPStmt1 = null;
		try{
			objConnection =getDbConnection();
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TA_RULE_QUERY_INFO);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
			objPStmt.setInt(2, targetsDTO.getTargetEntity());
			objPStmt.setInt(3, targetsDTO.getTargetEntity());
			objPStmt.setString(4, paramId);
			objResultSet = objPStmt.executeQuery();
			if(objResultSet !=null  )
			{				
				while(objResultSet.next()){
					paramCount=	objResultSet.getInt(1);
				}
			}
			
			
		}catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return paramCount;
	}
	
	public TargetsDTO reomveTAParameters(TargetsDTO targetsDTO,PartyContextDTO partyContextDTO) throws PSSException {

		final String STRMETHODNAME = "reomveTAParameters";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
		ResultSet objResultSet1 = null;
		ResultSet objResultSet2= null;
		ResultSet objResultSet3 = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		String targetDefDetId = null;
		ArrayList paramList = null;
		ArrayList eventList = null;
		ArrayList uploadParamSelectedList=null; 
		String qry1=null;
		HashMap<String, Integer> ruleQueryMap=null;
		try {
			objConnection = getDbConnection();			
			int hdrCount = 0;						
			
			objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_DEF_DET_ID);
			objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
			objPStmt.setInt(2, targetsDTO.getTargetEntity());
			objPStmt.setInt(3, targetsDTO.getTargetEntity());
			objResultSet1=objPStmt.executeQuery();
			if(objResultSet1.next()) {
				targetDefDetId = objResultSet1.getString(1);
			}
			objResultSet1.close();
			objPStmt.close();
			
			//Soft delete the records:start
			int updatedRows=0;
			// New one
			
			//Get All ids
			ArrayList uploaderArrayList=new ArrayList();
			ArrayList activeUploaderArryList=new ArrayList();
			if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
				qry1="select TARGET_PARAMETER_UPLOAD_DET_ID  from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAM_UPLOAD_HDR_ID in (select TARGET_PARAM_UPLOAD_HDR_ID from Target_Parameter_Upload_Hdr where ta_target_def_det_id=? and   is_deleted_ind='N' and GEO_UNIT_TYPE=?)";
					
			}
			else if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
				qry1="select TARGET_PARAMETER_UPLOAD_DET_ID  from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAM_UPLOAD_HDR_ID in (select TARGET_PARAM_UPLOAD_HDR_ID from Target_Parameter_Upload_Hdr where ta_target_def_det_id=? and   is_deleted_ind='N' and ENTITY_PARTY_TYPE=?)";
					
			}
			else{
				qry1="select TARGET_PARAMETER_UPLOAD_DET_ID  from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAM_UPLOAD_HDR_ID in (select TARGET_PARAM_UPLOAD_HDR_ID from Target_Parameter_Upload_Hdr where ta_target_def_det_id=? and   is_deleted_ind='N')";
					
			}
			objPStmt = objConnection.prepareStatement(qry1);
			objPStmt.setString(1, targetDefDetId);
			if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
				objPStmt.setString(2, targetsDTO.getTargetEntity()+"");		
			}
			else if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
				objPStmt.setInt(2, targetsDTO.getTargetEntity());		
			}
			objResultSet2=objPStmt.executeQuery();
			if(objResultSet2!=null){
            while(objResultSet2.next()) {
            	uploaderArrayList.add(objResultSet2.getInt(1));
			}
			}
			objResultSet2.close();			
    		objPStmt.close();    		
    		String strArray[] = targetsDTO.getStrParamSelected().split(",");
    		if(strArray.length>0){
    	         for(int i=0; i < strArray.length; i++){ 
    			 	 String tempVal=strArray[i];    			
     				 int selectedValue=(tempVal.trim().equals("")) ? 0:Integer.parseInt(tempVal);
    	        	 String qry=null;
    	        	 if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
    	        		 qry="select TARGET_PARAMETER_UPLOAD_DET_ID  from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAM_UPLOAD_HDR_ID in (select TARGET_PARAM_UPLOAD_HDR_ID from Target_Parameter_Upload_Hdr where ta_target_def_det_id=? and   is_deleted_ind='N' and GEO_UNIT_TYPE=?) and PARAMETER_ID=?";
    	    						
    	 			}
    	 			else if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
    	 				 qry="select TARGET_PARAMETER_UPLOAD_DET_ID  from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAM_UPLOAD_HDR_ID in (select TARGET_PARAM_UPLOAD_HDR_ID from Target_Parameter_Upload_Hdr where ta_target_def_det_id=? and   is_deleted_ind='N' and ENTITY_PARTY_TYPE=?) and PARAMETER_ID=?";
    	    						
    	 			}
    	 			else{
    	 				 qry="select TARGET_PARAMETER_UPLOAD_DET_ID  from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAM_UPLOAD_HDR_ID in (select TARGET_PARAM_UPLOAD_HDR_ID from Target_Parameter_Upload_Hdr where ta_target_def_det_id=? and   is_deleted_ind='N') and PARAMETER_ID=?";
    	    						
    	 			}    	        	 
    	        	objPStmt = objConnection.prepareStatement(qry);
    				objPStmt.setString(1, targetDefDetId);
    				 if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("1")){
    						objPStmt.setString(2, targetsDTO.getTargetEntity()+"");		
    						 objPStmt.setInt(3, selectedValue);
    	 			}
    	 			else if(targetsDTO.getSelectedTargetEntityType()!=null && targetsDTO.getSelectedTargetEntityType().trim().equals("2")){
    	 				objPStmt.setInt(2, targetsDTO.getTargetEntity());
    	 				 objPStmt.setInt(3, selectedValue);
    	 			}
    	 			else{
    	 				 objPStmt.setInt(2, selectedValue);
    	 			}
    				 objResultSet3=objPStmt.executeQuery();
    	            if(objResultSet3!=null){
    	                while(objResultSet3.next()) {
    	                	activeUploaderArryList.add(objResultSet3.getInt(1));
    	    			}
    	    			}
    	    		objResultSet3.close();	
    	    		objPStmt.close();
    	            }
    	            uploaderArrayList.removeAll(activeUploaderArryList);
    		}			
    		else {
    			uploaderArrayList=uploaderArrayList;	
    		}
    		
    		if(uploaderArrayList.size()>0){
    			
    			for(int a=0;a<uploaderArrayList.size();a++){
    			String qry3="delete from TARGET_PARAMETER_UPLOAD_DET where TARGET_PARAMETER_UPLOAD_DET_ID=?";
    			objPStmt = objConnection.prepareStatement(qry3);
    			int tempValue=(Integer)uploaderArrayList.get(a);
    			objPStmt.setInt(1, tempValue);    			
                updatedRows = objPStmt.executeUpdate();
        		objPStmt.close();
    			}
    		}	
						
			if (objConnection != null) {
				objConnection.close();
			}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.BaseDAOException");
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.SQLException");
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.CommonDAO.Exception");
		} finally {
			try {
				recycleDatabaseResources(objResultSet1, objPStmt, objConnection);
				recycleDatabaseResources(objResultSet2, objPStmt, objConnection);
				recycleDatabaseResources(objResultSet3, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
						"BaseDAOException " + _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			}
		}
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
		return targetsDTO;
	}
	
	public TargetsRuleDTO getRuleList(String targetDefHdrId) throws PSSException{
		final String STRMETHODNAME = ":::getRuleList:::";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;
		TargetsCommonDTO objCommonDTO = null;
		TargetsRuleDTO objTargetsRuleDTO = new TargetsRuleDTO();
		ArrayList<TargetsCommonDTO> arrPayoutStatusList=new ArrayList<TargetsCommonDTO>();
		ArrayList<TargetsCommonDTO> arrPayoutTypeList=new ArrayList<TargetsCommonDTO>();
		ArrayList<TargetsCommonDTO> arrPayoutRuleList=new ArrayList<TargetsCommonDTO>();
		//int payoutID=100235;
		try{
			objConnection = getDbConnection();
			// Get Payout Rule List starts
			objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TARGET_RULELIST);
			objPStmt.setInt(1,Integer.parseInt(targetDefHdrId));
			objResultSet=objPStmt.executeQuery();
				if(objResultSet!=null){
					while(objResultSet.next()){
						objCommonDTO = new TargetsCommonDTO();
						 objCommonDTO.setId(objResultSet.getString("TA_FILTER_ID"));
						 objCommonDTO.setName(objResultSet.getString("QRY_NM"));
						 objCommonDTO.setDesc(objResultSet.getString("QRY_DESC"));
						 objCommonDTO.setFullName(objResultSet.getString("QRY_NM")+":"+objResultSet.getString("QRY_DESC"));
						 objCommonDTO.setOrder(objResultSet.getInt("QRY_ORDER"));
						 arrPayoutRuleList.add(objCommonDTO);
					}
				}
				objResultSet.close();
				objPStmt.close();
				objTargetsRuleDTO.setArr_mandatory_ruleList(arrPayoutRuleList);
						
						//TargetsRuleDTO.setArrPayoutType(arrPayoutTypeList);
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException(_ex, "error.PayoutDepartmentDAO.SQLException", true);
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
			}
			LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
		}
		return objTargetsRuleDTO;
	}
	public ArrayList<TargetsCommonDTO> getRuleParameters()throws PSSException{
		final String STRMETHODNAME = ":::getRuleParameters:::";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;	
		ArrayList<TargetsCommonDTO> ruleParams = new ArrayList<TargetsCommonDTO>();
		try{
			objConnection = getDbConnection();
			objPStmt=objConnection.prepareStatement(ITargetQueries.GET_PAYOUT_RULE_PARAMETERS);
			objResultSet=objPStmt.executeQuery();
			if(objResultSet!=null){
				while(objResultSet.next()){
					TargetsCommonDTO dto = new TargetsCommonDTO();
					 dto.setId(objResultSet.getString("PROP_NM"));
					 dto.setDesc(objResultSet.getString("PROP_VALUE"));
					 ruleParams.add(dto);
				}
				
			}
		
	    } catch (Exception _ex) {
		LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
				+ _ex.getMessage());
		throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
	    } finally {
		try {
			recycleDatabaseResources(objResultSet, objPStmt, objConnection);
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
		}
		LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
	    }
		return ruleParams;
		
		}
	public ArrayList<TargetsCommonDTO> getParametersForQryTableNames(String targetDefId)throws PSSException{
		final String STRMETHODNAME = ":::getParametersForQryTableNames:::";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;	
		ArrayList<TargetsCommonDTO> ruleParams = new ArrayList<TargetsCommonDTO>();
		try{
			objConnection = getDbConnection();
			objPStmt=objConnection.prepareStatement("select TA_FILTER_ID,TMP_TABLE_NM ||'(' || QRY_NM ||')' as qryName from TA_FILTER_QUERY where TA_TARGET_DEF_HDR_ID=? and is_deleted_ind='N' and IS_ACTIVE_IND='Y' ");
			objPStmt.setString(1,targetDefId);
			objResultSet=objPStmt.executeQuery();
			if(objResultSet!=null){
				while(objResultSet.next()){
					TargetsCommonDTO dto = new TargetsCommonDTO();
					 dto.setId(objResultSet.getString("TA_FILTER_ID"));
					 dto.setDesc(objResultSet.getString("qryName"));
					 ruleParams.add(dto);
				}
				
			}
		
	    } catch (Exception _ex) {
		LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
				+ _ex.getMessage());
		throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
	    } finally {
		try {
			recycleDatabaseResources(objResultSet, objPStmt, objConnection);
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
		}
		LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
	    }
		return ruleParams;
		
		}
	public TargetsRuleDTO queryExecution(TargetsRuleDTO objTargetsRuleDTO,Query derivedQuery) throws PSSException{
		final String STRMETHODNAME = ":queryExecution:";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
		ArrayList<TargetsCommonDTO> derivedColumns = new ArrayList<TargetsCommonDTO>();
		Connection connection = null;
		ResultSet objResultSet = null;
		PreparedStatement objPStmt = null;
		String query="";
		ArrayList list = new ArrayList();
		String selectedParamValue=null;
			try{
			connection=getDbConnection();
			query= derivedQuery.getQuery();	
				if(query!="" && query.contains("<<FromDate>>") && query.contains("<<ToDate>>")){
					query=query.replace("<<FromDate>>", objTargetsRuleDTO.getFromDate());
					query=query.replace("<<ToDate>>", objTargetsRuleDTO.getToDate());
				}if(query!="" && query.contains("<<PID>>")){
					query=query.replace("<<PID>>", objTargetsRuleDTO.getPid());
				}				
				
				query ="select * from ("+query+") where 1<>1";
				list=derivedQuery.getParams();
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Derived Query : ", query);
				objPStmt = connection.prepareStatement(query);
				try{
				objResultSet = objPStmt.executeQuery();
				if (objResultSet!=null) {
					objTargetsRuleDTO.setMessage(IConstants.ERROR_SUCESS); 
				 }
				else{
					objTargetsRuleDTO.setMessage(IConstants.PROVIDE_VALID_QUERY_DETAILS);	
				}
				}catch (Exception error){
					objTargetsRuleDTO.setMessage(error.getMessage());	
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
							+ error.getMessage());
					throw new PSSException("errors.DerivedQry.invalid");
				}
				if (objResultSet != null) {
					objResultSet.close();
				}
				if (objPStmt != null) {
					objPStmt.close();
				}	
				if (connection != null) {
					connection.close();
				}
			 }catch (SQLException _ex) {
				 	objTargetsRuleDTO.setMessage(IConstants.PROVIDE_VALID_QUERY_DETAILS);	
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
							+ _ex.getMessage());
					throw new PSSException("errors.DerivedQry.invalid");
				} catch (Exception _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
							+ _ex.getMessage());
					throw new PSSException("error.CommonDAO.Exception");
				} finally {
					try {
						recycleDatabaseResources(objResultSet, objPStmt, connection);
					} catch (BaseDAOException _ex) {
						LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
								"BaseDAOException " + _ex.getMessage());
						throw new PSSException("error.CommonDAO.BaseDAOException");
					}
				}
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End ");
	return objTargetsRuleDTO;
	}
	public TargetsRuleDTO modifyTablesBytargetDefId(String targetDefId,TargetsRuleDTO objTargetsRuleDTO)throws PSSException{
		final String STRMETHODNAME = ":::modifyTablesByPayoutId:::";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;	
		ArrayList<String> arrPayoutRuleList=new ArrayList<String>();
		boolean flag=false;
		
		try{	
			objConnection = getDbConnection();
			objPStmt=objConnection.prepareStatement(ITargetQueries.TARGET_RULES_POPULATION);
			objPStmt.setInt(1,Integer.parseInt(objTargetsRuleDTO.getPreTargetRuleId()));
			objPStmt.setInt(2,Integer.parseInt(targetDefId));
			objPStmt.setString(3,ITargetConstants.IS_ACTIVE_IND);
			objPStmt.setString(4,ITargetConstants.IS_DELETED_IND);
			objResultSet=objPStmt.executeQuery();	
			if(objResultSet!=null){
				while(objResultSet.next()){
					objTargetsRuleDTO.setRuleName(objResultSet.getString(1));
					objTargetsRuleDTO.setRuleDescription(objResultSet.getString(2));
					objTargetsRuleDTO.setDerivedQuery(objResultSet.getString(3));
				}
			}
		
			 if (objResultSet != null) {
					objResultSet.close();
				}
				if (objPStmt != null) {
					objPStmt.close();
				}
		if(objConnection!=null){
			objConnection.close();
		}
		
		
		} catch (Exception _ex) {
		LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
				+ _ex.getMessage());
		throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
	} finally {
		try {
			recycleDatabaseResources(objResultSet, objPStmt, objConnection);
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
		}
		LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
	}
		return objTargetsRuleDTO;
		
		}
	
	public TargetsRuleDTO saveTargetRule(TargetsRuleDTO objTargetsRuleDTO,String targetDefHdrID,UserContextVO objUserContextVO) throws PSSException{
		final String STRMETHODNAME = ":::saveTargetRule:::";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;	
		TargetsCommonDTO objCommonDTO = null;	
		ArrayList<TargetsCommonDTO> arrPayoutRuleList=new ArrayList<TargetsCommonDTO>();
		TargetsRuleDTO objPayoutDTO=new TargetsRuleDTO();
		String result=null,message=null; int targetRuleID=0;String userId=objUserContextVO.getRoleCode(),targetTableName=null;
		int rows=0,ruleOrder=0;
		int targetDefHdrId=Integer.parseInt(targetDefHdrID);
		String tableName=null;
		String preRuleId=null;
		boolean flag=false; String mode=null;
		try{
			
			/*
			 * added for Making table name
			 */
			objConnection = getDbConnection();		
			targetRuleID = super.getMaxId(ITargetQueries.TA_FILTER_QUERY);
					
				int count=0;
				objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TARGETRULE_MAXID);
				objPStmt.setInt(1, Integer.parseInt(targetDefHdrID));
				objResultSet=objPStmt.executeQuery();
				if(objResultSet!=null){
					while(objResultSet.next()){						
						ruleOrder=objResultSet.getInt("MAX_QRY_ORDER");
						count=objResultSet.getInt("QUERY_COUNT");
					}
				}
				objResultSet.close();
				objPStmt.close();	
				
				// Check rule Whether exists in the Payout rule name
				objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TARGETRULE_COUNT_BY_NAME);
				objPStmt.setInt(1,targetDefHdrId);
				objPStmt.setString(2, objTargetsRuleDTO.getRuleName());
				objResultSet=objPStmt.executeQuery();
				if(objResultSet!=null){
					while(objResultSet.next()){
						count=objResultSet.getInt("RULE_COUNT");
						preRuleId=objResultSet.getInt("RULE_ID")+"";
					}
				}				
				objResultSet.close();
				objPStmt.close();
				if(preRuleId!=null && !preRuleId.trim().equals("") && !preRuleId.trim().equals("0")){
					objTargetsRuleDTO.setPreTargetRuleId(preRuleId);
				}
				if(objTargetsRuleDTO.getTargetRuleSaveType()!=null && !objTargetsRuleDTO.getTargetRuleSaveType().trim().equals("")){
					if(count>0){
					if(objTargetsRuleDTO.getTargetRuleSaveType().trim().equals("addNew")){
						mode="alreadyExists";		
					}
					else if(objTargetsRuleDTO.getTargetRuleSaveType().trim().equals("modify")){
					mode="modify";	
					}
					}
					else{
						mode="create";
					}
				}
				//mode=count==0?"create":"modify";
				if(!mode.trim().equals("alreadyExists")){
				if(count==0){
					if(objTargetsRuleDTO!=null && objTargetsRuleDTO.getRuleName()!=null){
						targetTableName=IConstants.TA_RULE_TABLE_PREFIX;
						tableName=objTargetsRuleDTO.getRuleName();					
						tableName=tableName.trim().length()>=5?tableName.substring(0, 5):tableName;
						tableName=targetTableName+"_"+tableName+"_"+targetRuleID;
					}
				
				}
				if(count==0){
				objPStmt=objConnection.prepareStatement(ITargetQueries.INSERT_TA_FILTER_QUERY);
				objPStmt.setInt(1,targetRuleID);
				objPStmt.setString(2,objTargetsRuleDTO.getRuleName());
				objPStmt.setString(3,objTargetsRuleDTO.getRuleDescription());
				objPStmt.setString(4,objTargetsRuleDTO.getDerivedQuery());
				objPStmt.setString(5,tableName);
				objPStmt.setInt(6,ruleOrder+1);
				objPStmt.setTimestamp(7, CommonUtils.getCurrentTimeStamp());	
				objPStmt.setString(8,userId);				
				objPStmt.setInt(9,targetDefHdrId);
				rows=objPStmt.executeUpdate();
				objResultSet.close();
				objPStmt.close();	
				}
				else{
					
					// Check rule Whether exists in the Payout rule name
					objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TARGET_RULE_DETAILS);
					objPStmt.setInt(1,targetDefHdrId);
					objPStmt.setString(2, objTargetsRuleDTO.getRuleName());
					objResultSet=objPStmt.executeQuery();
					if(objResultSet!=null){
						while(objResultSet.next()){ 
							targetRuleID=objResultSet.getInt("TA_FILTER_ID");
						tableName=objResultSet.getString("TMP_TABLE_NM");
						}
					}
					objResultSet.close();
					objPStmt.close();
					
					//message="PayoutRuleExists";
					objPStmt=objConnection.prepareStatement(ITargetQueries.UPDATE_TA_FILTER_QUERY);
					objPStmt.setString(1,objTargetsRuleDTO.getDerivedQuery());				
					objPStmt.setTimestamp(2, CommonUtils.getCurrentTimeStamp());	
					objPStmt.setString(3,userId);	
					objPStmt.setInt(4,targetRuleID);
					rows=objPStmt.executeUpdate();
					objResultSet.close();
					objPStmt.close();	
					
				}
				}
				else if(count>0 &&mode.trim().equals("alreadyExists")){
					objTargetsRuleDTO.setMessage("Target Rule Name Already Exists");	
				}
				objTargetsRuleDTO.setRuleId(targetRuleID);
				objTargetsRuleDTO.setRuleTableName(tableName);
		result=rows!=0?"SUCCESS":"";
		if(mode!=null && mode.trim().equals("create") && (result!=null && !result.trim().equals("") && result.trim().equals("SUCCESS"))){
			objTargetsRuleDTO.setMessage(IConstants.TARGET_RULE_ADDED_SUCCESS_MESSAGE);		
		}
		if(mode!=null && mode.trim().equals("modify") && (result!=null && !result.trim().equals("") && result.trim().equals("SUCCESS"))){
			objTargetsRuleDTO.setMessage(IConstants.TARGET_RULE_ADDED_SUCCESS_MESSAGE);		
		}
		
		//if(result.trim().equals("SUCCESS")){
			//Save Payout Rule column			
			//saveRuleColumns(objTargetsRuleDTO,targetDefHdrId,mode);		
					
			// Get Payout Rule List starts
			objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TARGET_RULE_LIST);
			objPStmt.setInt(1,targetDefHdrId);
			objResultSet=objPStmt.executeQuery();
			if(objResultSet!=null){
				while(objResultSet.next()){
					objCommonDTO = new TargetsCommonDTO();
					 objCommonDTO.setId(objResultSet.getString("TA_FILTER_ID"));
					 objCommonDTO.setName(objResultSet.getString("QRY_NM"));
					 objCommonDTO.setDesc(objResultSet.getString("QRY_DESC"));
					 objCommonDTO.setOrder(objResultSet.getInt("QRY_ORDER"));
					 arrPayoutRuleList.add(objCommonDTO);
				}
			}
			objResultSet.close();
			objPStmt.close();
			objPayoutDTO.setArr_mandatory_ruleList(arrPayoutRuleList);	
			//}
			
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
					+ _ex.getErrorCode());
			throw new PSSException(_ex, _ex.getErrorCode(), true);
		} catch (SQLException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
					+ _ex.getMessage());
			throw new PSSException(_ex, "error.PayoutDepartmentDAO.SQLException", true);
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
			}
			LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
		}
		return objTargetsRuleDTO;
	}
	public TargetsRuleDTO alterPayoutRuleTable(TargetsRuleDTO objTargetsRuleDTO,PartyContextDTO objContextDTO)throws PSSException{
		final String STRMETHODNAME = ":::alterPayoutRuleTable:::";
		ResultSet objResultSet = null;
		Connection objConnection = null;
		PreparedStatement objPStmt = null;				
		String result=null;
		int payoutID=Integer.parseInt(objTargetsRuleDTO.getTargetDefId());	int count=0;
		
		try{
				// Alter Rule Table	
			   CallableStatement proc = null;
			   objConnection = getDbConnection(); 
			   proc = objConnection.prepareCall("{ call TA_CREATE_TABLE(?,?,?) }");
			   proc.setInt(1, objTargetsRuleDTO.getRuleId());
			   proc.setString(2,objTargetsRuleDTO.getRuleTableName());
			   if(objTargetsRuleDTO.isModifyInd()){
				   proc.setString(3,objTargetsRuleDTO.getPreTargetRuleId());  
			   }else{
				   proc.setNull(3,Types.VARCHAR);    
			   }
			   boolean flag = proc.execute();
			   if(flag){
				   objTargetsRuleDTO.setMessage(IConstants.TARGET_RULE_ADDED_SUCCESS_MESSAGE);
			   }else{
				   objTargetsRuleDTO.setMessage(IConstants.TARGET_RULE_ADDED_SUCCESS_MESSAGE);
			   }
			   proc.close();
		
	} catch (Exception _ex) {
		LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
				+ _ex.getMessage());
	throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
	} finally {
		try {
			recycleDatabaseResources(objResultSet, objPStmt, objConnection);
		} catch (BaseDAOException _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
		}
		LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
	}
		return objTargetsRuleDTO;
		
		}
	
	public ArrayList<TargetsCommonDTO> getDerivedColumns(TargetsRuleDTO objTargetsRuleDTO,Query derivedQuery) throws PSSException{
		final String STRMETHODNAME = ":getDerivedColumns:";
		LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
		ArrayList<TargetsCommonDTO> derivedColumns = new ArrayList<TargetsCommonDTO>();
		Connection connection = null;
		ResultSet objResultSet = null;
		PreparedStatement objPStmt = null;
		String query="";
		ArrayList list = new ArrayList();
		String selectedParamValue=null;
			try{
			connection=getDbConnection();
			String paramValue="";
			selectedParamValue=objTargetsRuleDTO.getParameter();
			objPStmt=connection.prepareStatement(ITargetQueries.GET_TARGET_RULE_PARAM_VALUE);
			objPStmt.setString(1,selectedParamValue);
			objResultSet=objPStmt.executeQuery();
			if(objResultSet!=null){
				while(objResultSet.next()){
					paramValue=objResultSet.getString("PROP_VALUE");
				}
			}
			objResultSet.close();
			objPStmt.close();	
			
				query= derivedQuery.getQuery();	
				if(query!="" && (query.contains("<<FromDate>>") || query.contains("<<ToDate>>"))){
					query=query.replace("<<FromDate>>", "sysdate");
					query=query.replace("<<ToDate>>", "sysdate");					
				}
				
				
				query ="select * from ("+query+") where 1<>1";
				list=derivedQuery.getParams();
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Derived Query : ", query);
				objPStmt = connection.prepareStatement(query);				
				objResultSet = objPStmt.executeQuery();
				if (objResultSet!=null) {
				     ResultSetMetaData objMetaData = objResultSet.getMetaData();
					 int colCount = objMetaData.getColumnCount();
					 
					 for(int i=1;i<=colCount;i++){
						 TargetsCommonDTO dto = new TargetsCommonDTO();
						 dto.setDesc(objTargetsRuleDTO.getRuleName().trim()+"."+objMetaData.getColumnName(i));
						 dto.setId(objMetaData.getColumnName(i));
						 dto.setQuery(Class.forName(objMetaData.getColumnClassName(i)).getSimpleName());
						 derivedColumns.add(dto);
						 objTargetsRuleDTO.setRuleTableName(objMetaData.getTableName(1));
					 }			
				 }
			 
			 if (objResultSet != null) {
					objResultSet.close();
				}
				if (objPStmt != null) {
					objPStmt.close();
				}	
				if (connection != null) {
					connection.close();
				}
			 }catch (SQLException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
							+ _ex.getMessage());
					throw new PSSException("errors.DerivedQry.invalid");
				} catch (Exception _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
							+ _ex.getMessage());
					throw new PSSException("error.CommonDAO.Exception");
				} finally {
					try {
						recycleDatabaseResources(objResultSet, objPStmt, connection);
					} catch (BaseDAOException _ex) {
						LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
								"BaseDAOException " + _ex.getMessage());
						throw new PSSException("error.CommonDAO.BaseDAOException");
					}
				}
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End ");
	return derivedColumns;
	}	
	
	
		public String deleteTargetRules(TargetsRuleDTO objPayoutRuleDTO,String selectedRules,String targetDefHdrId)throws PSSException{
			final String STRMETHODNAME = ":::deletePayoutRules:::";
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;	
			TargetsCommonDTO objCommonDTO = null;	
			ArrayList<TargetsCommonDTO> arrPayoutRuleList=new ArrayList<TargetsCommonDTO>();
			String result=null; int payoutRuleID=0,rows_count=0;String userId="admin",ruleTableName=null,payoutStaus=null;
			int rows=0,ruleOrder=0;			
			int RuleId=0; ArrayList <String> tableList=new ArrayList<String>();
			TargetsDTO objTargetsDTO=new TargetsDTO();
			
			try{
				// Create Rule Table
				objConnection = getDbConnection();
				StringTokenizer st=new StringTokenizer(selectedRules,",");
				while(st.hasMoreElements()){
				String selectedRule=(String) st.nextElement();	
				objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TABLENM_BY_RULEID);
				objPStmt.setInt(1, Integer.parseInt(selectedRule));
				objPStmt.setInt(2, Integer.parseInt(targetDefHdrId));
				objResultSet=objPStmt.executeQuery();
				if(objResultSet!=null){
					while(objResultSet.next()){
						ruleTableName=objResultSet.getString("TMP_TABLE_NM");	
						tableList.add(ruleTableName);						
					}
				}
				objResultSet.close();
				objPStmt.close();				
				
				objPStmt=objConnection.prepareStatement(ITargetQueries.DELETE_TARGET_RULES);
				objPStmt.setInt(1,Integer.parseInt(selectedRule));
				objPStmt.setInt(2,Integer.parseInt(targetDefHdrId));
				rows=objPStmt.executeUpdate();
				objPStmt.close();				
				}
				
				result=rows>0?"SUCCESS":"FAILURE";
				/*if(result.trim().equalsIgnoreCase("SUCCESS")){					
						for(int i=0;i<tableList.size();i++){
						ruleTableName=tableList.get(i).toString();
						objPStmt=objConnection.prepareStatement(ITargetQueries.DROP_TARGET_RULE_TABLE);
						objPStmt.setString(1, ruleTableName);
						objPStmt.executeUpdate();
						objPStmt.close();
						}
				}*/
				
				String result1=dropTargetRuleTable(tableList);
				return result;				
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
			}
			LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
		}
			
		}
		
		public TargetsRuleDTO targetQueryExecution(TargetsRuleDTO objTargetsRuleDTO,Query derivedQuery) throws PSSException{
			final String STRMETHODNAME = ":queryExecution:";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
			ArrayList<TargetsCommonDTO> derivedColumns = new ArrayList<TargetsCommonDTO>();
			Connection connection = null;
			ResultSet objResultSet = null;
			PreparedStatement objPStmt = null;
			String query="";
			ArrayList list = new ArrayList();
			String selectedParamValue=null;
				try{
				connection=getDbConnection();
				query= derivedQuery.getQuery();	
				if(query!="" && (query.contains("<<FromDate>>") || query.contains("<<ToDate>>"))){
						if(query.contains("<<FromDate>>")){
							String date1="to_char("+objTargetsRuleDTO.getFromDate()+",'dd/MM/yyyy')";							
							query=query.replace("<<FromDate>>", date1);								
						}
						if(query.contains("<<ToDate>>")){
							String date2="to_char("+objTargetsRuleDTO.getToDate()+",'dd/MM/yyyy')";
							query=query.replace("<<ToDate>>",date2);	
						}
						
					}					
					query ="select * from ("+query+") where 1<>1";
					list=derivedQuery.getParams();
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "Derived Query : ", query);
					objPStmt = connection.prepareStatement(query);
					try{
					objResultSet = objPStmt.executeQuery();
					if (objResultSet!=null) {
						objTargetsRuleDTO.setMessage(IConstants.ERROR_SUCESS); 
					 }
					else{
						objTargetsRuleDTO.setMessage(IConstants.PROVIDE_VALID_QUERY_DETAILS);	
					}
					}catch (Exception error){
						objTargetsRuleDTO.setMessage(error.getMessage());	
						LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
								+ error.getMessage());
						throw new PSSException("errors.DerivedQry.invalid");
					}
				 if (objResultSet != null) {
						objResultSet.close();
					}
					if (objPStmt != null) {
						objPStmt.close();
					}	
					if (connection != null) {
						connection.close();
					}
				 }catch (SQLException _ex) {
						LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
								+ _ex.getMessage());
						throw new PSSException("errors.DerivedQry.invalid");
					} catch (Exception _ex) {
						LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
								+ _ex.getMessage());
						throw new PSSException("error.CommonDAO.Exception");
					} finally {
						try {
							recycleDatabaseResources(objResultSet, objPStmt, connection);
						} catch (BaseDAOException _ex) {
							LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
									"BaseDAOException " + _ex.getMessage());
							throw new PSSException("error.CommonDAO.BaseDAOException");
						}
					}
					LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End ");
		return objTargetsRuleDTO;
		}
		
		public String changeTargetRuleOrder(TargetsRuleDTO objTargetsRuleDTO,int ruleId,String orderType,String ruleinfo,String targetDefHdrId)throws PSSException{
			final String STRMETHODNAME = ": changePayoutRuleOrder : ";
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;	
			String result=null;
			int rows=0,rule=0;			
			try{
				objConnection = getDbConnection();
				StringTokenizer ruleOrderInfo=new StringTokenizer(ruleinfo,"|");
				while(ruleOrderInfo.hasMoreElements()){
					String tmp=(String) ruleOrderInfo.nextElement();
					StringTokenizer tmpRule=new StringTokenizer(tmp,",");
					int ruleid=Integer.parseInt((String) tmpRule.nextElement());
					int ruleOrder=Integer.parseInt((String) tmpRule.nextElement());int newRuleOrder=0;
					String orderingType=(String) tmpRule.nextElement();
					objPStmt=objConnection.prepareStatement(ITargetQueries.GET_TARGET_RULE_ID_BY_ORDER);
					objPStmt.setInt(1,ruleOrder);
					objPStmt.setInt(2,Integer.parseInt(targetDefHdrId));					
					objResultSet=objPStmt.executeQuery();
					if(objResultSet!=null){
						while(objResultSet.next()){							
							rule=objResultSet.getInt("TA_FILTER_ID");
						}
					}
					objPStmt.close();
					
					objPStmt=objConnection.prepareStatement(ITargetQueries.UPDATE_TARGET_RULE_ORDER);					
					newRuleOrder=orderingType.trim().equals("decrement")?ruleOrder-1:orderingType.trim().equals("increment")?ruleOrder+1:ruleOrder;
					objPStmt.setInt(1,newRuleOrder);
					objPStmt.setInt(2,rule);
					rows=objPStmt.executeUpdate();
					objPStmt.close();
					
					objPStmt=objConnection.prepareStatement(ITargetQueries.UPDATE_TARGET_RULE_ORDER);					
					objPStmt.setInt(1,ruleOrder);
					objPStmt.setInt(2,ruleid);
					rows=objPStmt.executeUpdate();
					objPStmt.close();		
					
				}				
				result=rows>0?"SUCCESS":"FAILURE";
				return result;
				
				

			
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
			throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
			}
			LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
		}
			
			}
		
		public String dropTargetRuleTable(ArrayList tableNameList)throws PSSException{
			final String STRMETHODNAME = ":::dropTargetRuleTable:::";
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;				
			String result=null;
			int count=0;
			String ruleTableName=null;
			try{
					// Alter Rule Table	
				for(int i=0;i<tableNameList.size();i++){
					ruleTableName=tableNameList.get(i).toString();	
					CallableStatement proc = null;
					   objConnection = getDbConnection(); 
					   proc = objConnection.prepareCall("{ call TA_DROP_RULE_TABLE(?) }");					 
					   proc.setString(1,ruleTableName);				  
					   boolean flag = proc.execute();
					   if(flag){
						   result="SUCCESS";
					   }else{
						   result="FAILURE";
					   }
					   proc.close();
				}
				   
			
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
		throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
			}
			LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
		}
			return result;
			
			}
		
		public ArrayList<CommonDTO> getTargetTableList(String targetDefHdrId) throws PSSException
		{
			final String STRMETHODNAME = "getTargetTableList";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ArrayList<CommonDTO> parameterList =new ArrayList<CommonDTO>();
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;
			ResultSetMetaData objMetaData = null;
			int colCount=0;
			CommonDTO objCommonDTO =null;
			String query=null;
			try{
				objConnection =getDbConnection();
				objPStmt =objConnection.prepareStatement(ITargetQueries.GET_TARGET_TABLE_TARGETDEFHDRID);
				objPStmt.setInt(1, Integer.parseInt(targetDefHdrId));
				objResultSet = objPStmt.executeQuery();
				if(objResultSet !=null && objResultSet.next())
				{
					objCommonDTO=new CommonDTO();
					objCommonDTO.setId(objResultSet.getInt("TA_FILTER_ID")+"");
					objCommonDTO.setDesc(objResultSet.getString("TMP_TABLE_NM"));
					parameterList.add(objCommonDTO);
				}
				if(objResultSet !=null)
					objResultSet.close();
				if(objPStmt !=null)
					objPStmt.close();
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "query::::",query);
		
			}catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
				
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.END_FOR_LOG);
			return parameterList;
		}
		
		public ArrayList<CommonDTO> getTargetParameterInfoList(TargetsDTO objTargetsDTO) throws PSSException
		{
			final String STRMETHODNAME = "getTargetTableList";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ArrayList<CommonDTO> parameterList =new ArrayList<CommonDTO>();
			ResultSet objResultSet = null;
			ResultSet objResultSet1 = null;
			ResultSet objResultSet2 = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;
			ArrayList<CommonDTO> derivedParameterColumns=new ArrayList<CommonDTO>();
			CommonDTO objCommonDTO =null;
			String query=null;
			try{
				objConnection = getDbConnection();				
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_RULE_MAP_PARAMETERS);	
				
				objPStmt.setInt(1, objTargetsDTO.getTargetTypeId());
				objResultSet1=objPStmt.executeQuery();

					if (null != objResultSet1) {
						while (objResultSet1.next()) {
							query=objResultSet1.getString(1);	
						}							
					}
					objResultSet1.close();	
					objPStmt = objConnection.prepareStatement(query);	
					objResultSet2 = objPStmt.executeQuery();
					ResultSetMetaData rsmd = objResultSet2.getMetaData();
					
					 if (objResultSet2 != null) {
					        ResultSetMetaData columns = objResultSet2.getMetaData();
					        int colCount = columns.getColumnCount();
							 for(int i=1;i<=colCount;i++){
								 CommonDTO dto = new CommonDTO();
								 dto.setQuery("O");
								 dto.setDesc(columns.getColumnName(i));
								 dto.setId(columns.getColumnTypeName(i));
								 derivedParameterColumns.add(dto);
							 }
					 }
					objPStmt.close();
					if (objConnection != null) {
					objConnection.close();
				}
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "query::::",query);
		
			}catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
				
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.END_FOR_LOG);
			return derivedParameterColumns;
		}
		
		public String getTaRuleQueryParamInformation(TargetsDTO targetsDTO,String paramId) throws PSSException
		{
			final String STRMETHODNAME = ":getTaRuleQueryInformation:";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", "Begin");
			Connection objConnection = null;
			ResultSet objResultSet = null;
			PreparedStatement objPStmt = null;
			QueryInfoDTO objInfoDTO =null;
			int ruleQryId=0;
			ArrayList<CommonDTO> objList = null;
			int ruleQueryId=0;		
			String ruleParamMapping=null;
			ResultSet objResultSet1 = null;
			PreparedStatement objPStmt1 = null;
			try{
				objConnection =getDbConnection();
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TA_RULE_PARAM_QUERY_INFO);
				objPStmt.setInt(1, targetsDTO.getTargetDefHdrId());
				objPStmt.setInt(2, targetsDTO.getTargetEntity());
				objPStmt.setInt(3, targetsDTO.getTargetEntity());
				objPStmt.setString(4, paramId);
				objResultSet = objPStmt.executeQuery();
				if(objResultSet !=null  )
				{				
					while(objResultSet.next()){
						ruleQueryId=	objResultSet.getInt(1);
					}
				}
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TA_RULE_PARAM_MAPPING);
				objPStmt.setInt(1, ruleQueryId);				
				objResultSet1 = objPStmt.executeQuery();
				if(objResultSet1 !=null  )
				{				
					while(objResultSet1.next()){
						String ruleColumn=	objResultSet1.getString("TA_RULE_QUERY_PARAM_NM");
						String mappedColumn=	objResultSet1.getString("ACHV_COL_NAME");
						String tempValue=ruleColumn +"~"+mappedColumn;
						if(ruleParamMapping!=null){
							ruleParamMapping=ruleParamMapping+","+tempValue;
						}
						else{
							ruleParamMapping=tempValue;
						}
					}
				}
				
			}catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
			return ruleParamMapping;
		}
		
		public TargetsDTO alterTargetRuleParamTable(TargetsDTO objTargetsDTO)throws PSSException{
			final String STRMETHODNAME = ":::alterPayoutRuleTable:::";
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;				
			String result=null;			
			HashMap<String, String>	tempHashMap=new HashMap<String, String>();		
			try{
					// Alter Rule Table	
				if(objTargetsDTO.getTargetRuleParamTableList().size()>0){
					tempHashMap=objTargetsDTO.getTargetRuleParamTableList();
					Iterator it=tempHashMap.entrySet().iterator();
					while(it.hasNext()){
						 Map.Entry pair = (Map.Entry)it.next();
						 CallableStatement proc = null;
						   objConnection = getDbConnection(); 
						   proc = objConnection.prepareCall("{ call TA_RULE_PARAM_CREATE_TABLE(?,?) }");
						   proc.setInt(1, Integer.parseInt((String)pair.getKey()));
						   proc.setString(2,(String)pair.getValue());
						  
						   boolean flag = proc.execute();
						   if(flag){
							   result=IConstants.TARGET_RULE_ADDED_SUCCESS_MESSAGE;
						   }else{
							   result=IConstants.TARGET_RULE_ADDED_SUCCESS_MESSAGE;
						   }
						   proc.close();
					}
				}
				   
			
		} catch (Exception _ex) {
			LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
					+ _ex.getMessage());
		throw new PSSException(_ex, "error.PayoutDepartmentDAO.Exception", true);
		} finally {
			try {
				recycleDatabaseResources(objResultSet, objPStmt, objConnection);
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.PayoutDepartmentDAO.BaseDAOException");
			}
			LogUtil.info("[Exited] PayoutDepartmentDAO getDetailsForInitialDisplay");
		}
			return objTargetsDTO;
			
			}
		
		public ArrayList getTargetTypeBySubChannel(String orgType,int subChannelPartyId) throws PSSException {

			final String STRMETHODNAME = "getTargetTypeBySubChannel";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ResultSet objResultSet2 = null;
			ResultSet objResultSet1 = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;
			
			ArrayList arrTypeList = new ArrayList();
			CommonDTO commonDTO = null; 
			try {
				objConnection = getDbConnection();
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_TYPE);
					objResultSet1=objPStmt.executeQuery();

					if (null != objResultSet1) {
						while (objResultSet1.next()) {
							commonDTO = new CommonDTO();
							commonDTO.setId(objResultSet1.getString(1));
							commonDTO.setDesc(objResultSet1.getString(2));
							arrTypeList.add(commonDTO);
						}
					
								
					objResultSet1.close();
					objPStmt.close();
				}
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_TYPE_BY_SUBCHANNEL);
					objPStmt.setInt(1, subChannelPartyId);
					if(orgType!=null && !orgType.trim().equals("")){
						objPStmt.setString(2, orgType.trim());	
					}
					else{
						objPStmt.setNull(2, Types.VARCHAR);
					}
					objResultSet2=objPStmt.executeQuery();

					if (null != objResultSet2) {
						while (objResultSet2.next()) {
							commonDTO = new CommonDTO();
							commonDTO.setId(objResultSet2.getString(1));
							commonDTO.setDesc(objResultSet2.getString(2));
							arrTypeList.add(commonDTO);
						}
					objResultSet2.close();
					objPStmt.close();
				}
				
				if (objConnection != null) {
					objConnection.close();
				}
				
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet1, objPStmt, objConnection);
					recycleDatabaseResources(objResultSet2, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
			return arrTypeList;
		}
		
		public ArrayList loadTargetEntitySelectedForIA(TargetsDTO targetsDTO)  throws PSSException{
			final String STRMETHODNAME = "loadTargetEntitySelected";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;
			
			ArrayList arrEntityList = new ArrayList();
			CommonDTO commonDTO = null; 
			try {
				objConnection = getDbConnection();				
				String targetType = this.getTargetName(objConnection, targetsDTO.getTargetTypeId());
				if(targetType!=null && !(targetType.equalsIgnoreCase(ITargetConstants.TARGET_TYPE_GEO)||targetType.equalsIgnoreCase(ITargetConstants.TARGET_TYP_HUMAN))){
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_TYPE_BY_SUBCHANNEL);	
				}				
				objPStmt.setInt(1, targetsDTO.getSubChannelPartyId());
				objPStmt.setString(2, targetsDTO.getSelectedOrgType());
				objResultSet=objPStmt.executeQuery();

					if (null != objResultSet) {
						while (objResultSet.next()) {
							commonDTO = new CommonDTO();
							commonDTO.setId(objResultSet.getString(1));
							commonDTO.setDesc(objResultSet.getString(2));
							arrEntityList.add(commonDTO);
						}
					
								
					objResultSet.close();
					objPStmt.close();
				}
				
				if (objConnection != null) {
					objConnection.close();
				}
				
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
			return arrEntityList;
		}
		
		public ArrayList getRuleMappingFields(int type)  throws PSSException{
			final String STRMETHODNAME = "loadTargetEntitySelected";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ResultSet objResultSet1 = null;
			ResultSet objResultSet2=null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;
			String query=null;
			ArrayList arrEntityList = new ArrayList();
			CommonDTO commonDTO = null; 
			ArrayList columnNames=new ArrayList();
			try {
				objConnection = getDbConnection();				
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_RULE_MAP_PARAMETERS);	
				
				objPStmt.setInt(1, type);
				objResultSet1=objPStmt.executeQuery();

					if (null != objResultSet1) {
						while (objResultSet1.next()) {
							query=objResultSet1.getString(1);	
						}							
					}
					objResultSet1.close();	
					objPStmt = objConnection.prepareStatement(query);	
					objResultSet2 = objPStmt.executeQuery();
					ResultSetMetaData rsmd = objResultSet2.getMetaData();
					
					 if (objResultSet2 != null) {
					        ResultSetMetaData columns = objResultSet2.getMetaData();
					        int i = 0;
					        while (i < columns.getColumnCount()) {
					          i++;
					          String firstColumnName = rsmd.getColumnName(i);					        
					          columnNames.add(columns.getColumnName(i));
					        }
					 }
					objPStmt.close();
					if (objConnection != null) {
					objConnection.close();
				}
				
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet1, objPStmt, objConnection);
					recycleDatabaseResources(objResultSet2, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
			return columnNames;
		}
		
		public String loadUploadInd(TargetsDTO targetsDTO)  throws PSSException{
			final String STRMETHODNAME = "loadTargetEntitySelected";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;
			String uploadInd="false";
			ArrayList arrEntityList = new ArrayList();
			CommonDTO commonDTO = null; 
			try {
				objConnection = getDbConnection();
				
				objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_IND);				
				objPStmt.setInt(1, targetsDTO.getTargetDefHdrId())	;
				objResultSet=objPStmt.executeQuery();

					if (null != objResultSet) {
						while (objResultSet.next()) {
							uploadInd=objResultSet.getString("UPLOAD_IND");
						}
					
								
					objResultSet.close();
					objPStmt.close();
				}
				
				if (objConnection != null) {
					objConnection.close();
				}
				
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
			return uploadInd;
		}
		
		public ArrayList getTAUploadType() throws PSSException {
			final String STRMETHODNAME = "getTAUploadType";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			ResultSet objResultSet = null;
			Connection objConnection = null;
			PreparedStatement objPStmt = null;			
			ArrayList arrUploadTypeList = new ArrayList();
			CommonDTO commonDTO = null; 
			try {
				objConnection = getDbConnection();					
				
					objPStmt = objConnection.prepareStatement(ITargetQueries.GET_TARGET_UPLOAD_TYPE);								
					objResultSet=objPStmt.executeQuery();

					if (null != objResultSet) {
						while (objResultSet.next()) {
							commonDTO = new CommonDTO();
							commonDTO.setId(objResultSet.getString(2));
							commonDTO.setDesc(objResultSet.getString(3));
							arrUploadTypeList.add(commonDTO);
						}
					}
								
					objResultSet.close();
					objPStmt.close();
				
				
				if (objConnection != null) {
					objConnection.close();
				}
				
			} catch (BaseDAOException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "BaseDAOException"
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.BaseDAOException");
			} catch (SQLException _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "SQLException "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.SQLException");
			} catch (Exception _ex) {
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ _ex.getMessage());
				throw new PSSException("error.CommonDAO.Exception");
			} finally {
				try {
					recycleDatabaseResources(objResultSet, objPStmt, objConnection);
				} catch (BaseDAOException _ex) {
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "",
							"BaseDAOException " + _ex.getMessage());
					throw new PSSException("error.CommonDAO.BaseDAOException");
				}
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " End:");
			return arrUploadTypeList;
		}
	//Added For TA Partner Addition ends
}