package com.planetsoft.drs.targets.action;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.upload.FormFile;

import com.ebix.components.upload.controller.core.UploadControllerConstants;
import com.ebix.components.upload.controller.core.UploadControllerException;
import com.ebix.components.upload.controller.core.UploadControllerTask;
import com.ebix.components.upload.controller.core.UploadControllerTaskPool;
import com.ebix.components.upload.controller.util.UploadControllerDAO;
import com.pi.fwk.util.FWKLogManagerUtil;
import com.planetsoft.drs.commission.form.UploadEftNeftPaymentForm;
import com.planetsoft.drs.common.action.PSSEnrollmentAction;
import com.planetsoft.drs.enrollment.action.PFandMobileUploadProcess;
import com.planetsoft.drs.enrollment.action.ReadDataFromFile;
import com.planetsoft.drs.enrollment.form.PFandMobileUploadForm;
import com.planetsoft.drs.targets.form.TargetsForm;
import com.planetsoft.drs.targets.form.TargetsUploadForm;
import com.planetsoft.drs.utilities.CommonDTO;
import com.planetsoft.drs.utilities.ICommonConstants;
import com.planetsoft.drs.utilities.IConstants;
import com.planetsoft.drs.utilities.IEnrollmentConstants;
import com.planetsoft.drs.utilities.IFRDConstants;
import com.planetsoft.drs.utilities.ILogger;
import com.planetsoft.drs.utilities.ITargetConstants;
import com.planetsoft.drs.utilities.LogManager;
import com.planetsoft.drs.utilities.PSSException;
import com.planetsoft.drs.utilities.ReportsGenerator;
import com.planetsoft.picp.commission.data.dto.UploadEftNeftPaymentDTO;
import com.planetsoft.picp.commission.service.deligate.UploadEftNeftPaymentBD;
import com.planetsoft.picp.common.data.dao.CommonDAO;
import com.planetsoft.picp.common.data.dto.PartyContextDTO;
import com.planetsoft.picp.common.data.vo.UserContextVO;
import com.planetsoft.picp.common.service.delegate.CommonBD;
import com.planetsoft.picp.enrollment.service.delegate.PFandMobileUploadBD;
import com.planetsoft.picp.hierarchy.data.dto.BankMasterExcelDTO;
import com.planetsoft.picp.targets.data.dao.TargetsDAO;
import com.planetsoft.picp.targets.data.dto.TargetUploadDTO;
import com.planetsoft.picp.targets.data.dto.TargetsDTO;
import com.planetsoft.picp.targets.service.delegate.TargetsBD;
import com.tpp.components.dashboard.admin.classes.IDBConstants;
import com.tpp.components.tab.admin.classes.TabController;
import com.tpp.components.tab.runtime.classes.TabConstants;
import com.tpp.components.util.classes.CommonUtilities;
import com.tpp.components.util.classes.TPPConfig;
import com.tpp.components.util.classes.UtilityManager;

public class TargetUploadAction extends PSSEnrollmentAction{

	ILogger LogUtil = LogManager.getInstance();
	private static final String STRCLASSNAME = "TargetUploadAction";
	
	public ActionForward targetUploadDisplay(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String STRMETHODNAME = "::::::targetUploadDisplay::::::";
		
		TabController objTabController = null;
		ActionErrors errors = new ActionErrors();
		ActionForward forwardPage = null;
		HashMap hmReqObj = null;
		UserContextVO objUserContextVO = null;
		HttpSession session = null;
		PartyContextDTO objPartyContextDTO = null;
		String entityCode = null;
		TargetsUploadForm objTargetsForm = null;
		TargetsDTO objTargetsDTO = null;
		ArrayList frdTypList = null;
		String claimId = null,policyNum = null;
		String mode = null,pageMode = null;
		ArrayList channelList = new ArrayList();
		ArrayList subChannelList = new ArrayList();
		TargetsBD objTargetsBD = null;
		String channelId=null;
		String targetDefHdrID = null;
		String actionName="";
		String tabPageParm=null;
		CommonDAO objCommonDao=new CommonDAO();
		CommonBD objCommonBD=new CommonBD();
		TargetsDAO objTargetsDAO=new TargetsDAO();
		try {
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
			saveToken(request);
			objTabController = new TabController();
			objTargetsBD = new TargetsBD();
			session = request.getSession();
			objUserContextVO = (UserContextVO) super.getUserContext(request);			
			objPartyContextDTO = super.getPartyContext(request);
			objTargetsForm = (TargetsUploadForm) form;
			//objTargetsDTO = new TargetsDTO(); 
			objTargetsDTO = objTargetsForm.getObjTargetsDTO();
			tabPageParm=request.getParameter("tabUploadParm");
			if(tabPageParm!=null && !tabPageParm.trim().equals("") && tabPageParm.trim().equals("new")){
				objTargetsDTO = new TargetsDTO();	
			}			
			if(objPartyContextDTO==null){
				objPartyContextDTO = new PartyContextDTO();
				objPartyContextDTO.setMode(IConstants.PSS_PARTYINSMODE);
				objPartyContextDTO.setUserContextVO(objUserContextVO);
				objPartyContextDTO.setWorkbasketid(0);
				objPartyContextDTO.setUserId(objUserContextVO.getUserId());
				objPartyContextDTO.setRoleCd(objUserContextVO.getRoleId());
				objPartyContextDTO.setUserId(objUserContextVO.getUserId());				
				super.setPartyContext(request, objPartyContextDTO);
			}
						
			//Getting Mode
			if(mode==null)
				mode = request.getParameter("mode");
			request.setAttribute("mode", mode);
			objPartyContextDTO.setMode(mode);
			
			channelId = request.getParameter("channelId");
			request.setAttribute("channelId", channelId);
			if(request.getParameter("entityName")!=null){
				objTargetsDTO.setEntityName(objCommonDao.getOrgNameByPartyId(request.getParameter("entityName")));
				objTargetsDTO.setTargetEntityPartyId(request.getParameter("entityName"));
			}
			objTargetsDTO = objTargetsBD.getTargetUploadMetaData(objTargetsDTO,objUserContextVO,objPartyContextDTO);	//Have to change here
			//Added For TA Partner Addition starts
			if(channelId!=null){			
					subChannelList = objTargetsBD.getSubChannelList(channelId);	
					objTargetsDTO.setSubChannelList(subChannelList);				
			}
			else{
				if(objPartyContextDTO.getRoleCd()!=null && !objPartyContextDTO.getRoleCd().trim().equals("") && objPartyContextDTO.getRoleCd().trim().equals("100244")){
					subChannelList = objTargetsBD.getSubChannelListByRole(objUserContextVO.getPathref());
					
					objTargetsDTO.setSubChannelList(subChannelList);
					String pathRef=objUserContextVO.getPathref();
					String arrayPath[] =pathRef.split(":");
					String subChannelPartyId=arrayPath[arrayPath.length-1];
					
					objTargetsDTO.setChannelList(objTargetsDAO.getChannelNameBySubChannel(objTargetsDTO.getSubChannelPartyId()));
				}	
				//Added For TA Partner Addition ends
			}
			objTargetsDTO.setUploadTypeList(objTargetsDAO.getTAUploadType());
			pageMode = request.getParameter("pageMode");
			
			/*String action = null;
			if(request.getParameter("action")!=null){
				action = request.getParameter("action");
				if(action.equalsIgnoreCase("generateTmplt")){
					TargetTemplateExtractor extractor = new TargetTemplateExtractor("TA", "temp", CommonUtils.getCurrentDateAsString(), "null", "0", "I", "null", "null", "XLS", "3");
					extractor.writeFileXLS();
				}
			}*/
			
			//Tab code
			request.getSession().setAttribute(IConstants.LOGIN_PSS_PARTYCONTEXT, null);
			request.getSession().setAttribute(IConstants.ROLE_TYPE_NAME, null);
			request.getSession().setAttribute(IConstants.ROLE, null);
			request.getSession().setAttribute(IConstants.ROLE_TYPE_ID, null);
			
			
			
			request.getSession().setAttribute(TabConstants.LAYOUTID, "100003");
			request.getSession().setAttribute(TabConstants.ACTION_LAYOUTID, IFRDConstants.TA_ACTION_LAYOUT);
			request.getSession().setAttribute(TabConstants.FIELD_ID, IFRDConstants.TA_Target_Upload_ID);
			
			request.setAttribute(TabConstants.LAYOUTID, "100003");
			request.setAttribute(TabConstants.ACTION_LAYOUTID, IFRDConstants.TA_ACTION_LAYOUT);
			request.setAttribute(TabConstants.FIELD_ID, IFRDConstants.TA_Target_Upload_ID);
			//Added For TA Partner Addition starts
			if(objPartyContextDTO.getRoleCd()!=null && !objPartyContextDTO.getRoleCd().trim().equals("") && (objPartyContextDTO.getRoleCd().trim().equals("100250") || objPartyContextDTO.getRoleCd().trim().equals("100244") || objPartyContextDTO.getRoleCd().trim().equals("100247"))){
				actionName="targetHSAction";
			}
			else {
				actionName="targetAction";	
			}
			
			setTabFilter(actionName, request);
			//Added For TA Partner Addition ends
			//end of code
			
			
			//Added For TA Partner Addition starts			
			if(request.getParameter("entityName")!=null){
				objTargetsDTO.setEntityName(objCommonDao.getOrgNameByPartyId(request.getParameter("entityName")));
				objTargetsDTO.setTargetEntityPartyId(request.getParameter("entityName"));
				objTargetsDTO.setSelectedPartnerType("0");
			}
			if(request.getParameter("targetentitytype")!=null){
				if(objTargetsDTO.getTargetEntityList().size()<=0){
			objTargetsDTO.setTargetEntityList(objCommonBD.getChannelPartnersList());
			objTargetsDTO.setEntityName("");
			objTargetsDTO.setTargetEntityPartyId("");
				}
			}
			objTargetsDTO.setSelectedPartnerType("0");		
			objTargetsForm.setObjTargetsDTO(objTargetsDTO);
			request.setAttribute("isSearchSelected","false");
			super.setPartyContext(request, objPartyContextDTO);

			forwardPage = objTabController.forwardTabControlRequestData(
					request, mapping, "../jsp/pss/targetUpload.jsp","../jsp/pss/targetUpload.jsp");
		

		} catch (Exception ex) {
			LogUtil.fatal(" Exception" + CLASS_NAME + STRMETHODNAME
					+ ex.getMessage());
			errors.add("Errors", new ActionError("error.PSS.GeneralException"));
			saveErrors(request, errors);
			return forwardPage;
		}
		finally{
			this.getTargetUploadDashboard(mapping, objTargetsForm, request, response);
		}
		LogUtil.info("[Exited]" + CLASS_NAME + STRMETHODNAME);
		return forwardPage;
	}
	
	public ActionForward generateTemplate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String STRMETHODNAME = "::::::generateTemplate::::::";					
		ActionErrors objActionErrors = new ActionErrors();
        ActionForward forwardPage = null;
        String appendQry = "";
        HashMap appendqryMap=null;
        TargetsBD obTargetsBD = null;
        TargetsUploadForm objTargetsForm = null;
        TargetUploadDTO objUploadDTO=null;
        TargetsDTO objTargetsDTO = null;
        TabController objTabController = null;
        String uploadType=null;
        try {
            LogUtil.info(CLASS_NAME, STRMETHODNAME, "", "Begin");

            objTargetsForm = (TargetsUploadForm) form;
            objTargetsDTO = objTargetsForm.getObjTargetsDTO();
            
            objTabController = new TabController();
            forwardPage = objTabController.forwardTabControlRequestData(
					request, mapping, "../jsp/pss/targetUpload.jsp","../jsp/pss/targetUpload.jsp");

            // Begin: session handling
            // To check if session contains user context object and user name else redirecting the page to login page.
            UserContextVO userContext = getUserContext(request);

            if (userContext == null) {
                return mapping.findForward(IConstants.INVALID_SESSION);
            }
            // End: session handling.
           
            obTargetsBD=new TargetsBD();
            objUploadDTO=new TargetUploadDTO();            
            objUploadDTO.setReportType(ITargetConstants.TARGET_REPORT_TYPE);
            objUploadDTO.setFileName(ITargetConstants.TARGET_REPORT_TYPE + "_" +
                    System.currentTimeMillis());
            
            objUploadDTO.setTargetType(objTargetsDTO.getTargetTypeId()+"");
            
            obTargetsBD.generateTargetTemplate(objUploadDTO,objTargetsDTO);
            
            request.setAttribute("filename",
            		objUploadDTO.getFileName());
            request.setAttribute("reportName","Target");
            uploadType=objTargetsForm.getObjTargetsDTO().getSelectedUploadType();
            if(uploadType!=null && !uploadType.trim().equals("") && uploadType.trim().equals("0")){
            uploadType="xls";	
            }
            
            String uploadFileName= objUploadDTO.getFileName()+"."+uploadType.trim();
            String disposition =null;
            File file = new File(uploadFileName); 
            FileInputStream fin = new FileInputStream(file);
    		
    		
    		// Set the browser's mime type
    		
   
    		// Ensure the browser's page to expect a file
    		//response.setHeader("Expires", "0");
    		//response.setHeader("Cache-Control", "");
    		
    		//response.setHeader("Content-disposition","attachment;filename="+objUploadDTO.getFileName()+".xls");
    		//Added for CSV by Saradha
            
            if(uploadType!=null && !uploadType.trim().equals("") && uploadType.trim().equals("xls")){
            	response.setContentType("application/vnd.ms-excel"); 
            	
            }
            else if(uploadType!=null && !uploadType.trim().equals("") && uploadType.trim().equals("csv")){
            	response.setContentType("text/csv");
            }    		 
            disposition = "attachment; fileName="+uploadFileName;
             response.setHeader("Content-Disposition", disposition);

    		// Ensure the browser's page to expect a file
  
    		// Use the SevletOutputStream to send the byteArray's data to the browser
    		
    		ServletOutputStream outStream = response.getOutputStream();
			int numBytes = 0;
			byte[] byteArray = new byte[512];
			while((numBytes = fin.read(byteArray)) != -1){
				outStream.write(byteArray,0,numBytes);
			}
    		fin.close();
    		outStream.close();
    		
    		if(file.exists()){
    			//deleting the temporary excel file from domain after save or open
    			file.delete();
    		}	
    		
    		
                
            LogUtil.info(CLASS_NAME, STRMETHODNAME, "", "End");

		} catch (Exception ex) {
			LogUtil.fatal(" Exception" + CLASS_NAME + STRMETHODNAME
					+ ex.getMessage());
			objActionErrors.add("Errors", new ActionError("error.PSS.GeneralException"));
			saveErrors(request, objActionErrors);			
		}
		finally{
			this.getTargetUploadDashboard(mapping, objTargetsForm, request, response);
		}
		return null;
	}
	
	public ActionForward uploadFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		final String STRMETHODNAME = "::uploadFile::";
		ActionForward forwardPage = new ActionForward();
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		UserContextVO objUserContextVO = null;
		PartyContextDTO objContextDTO=null;
		//PartyContextDTO 
		InputStream objInputStream = null;
		String module=null;
		ActionErrors objActionErrors = new ActionErrors();
		
		TargetsUploadForm tform = (TargetsUploadForm)form;
		try {
			TabController objTabController = null;
			objTabController = new TabController();
			forwardPage = objTabController.forwardTabControlRequestData(
					request, mapping, "../jsp/pss/targetUpload.jsp","../jsp/pss/targetUpload.jsp");
			objUserContextVO = (UserContextVO) super.getUserContext(request);
			objContextDTO=super.getPartyContext(request);
			// check for the session out
			if (null == objUserContextVO) {
				 // Forward to login page.
				return mapping.findForward(IConstants.INVALID_SESSION);				 
			}
			TargetsDTO targetDTO = tform.getObjTargetsDTO() ;
			targetDTO.setLstUpdtUserId(objUserContextVO.getUserId());
			// To get the Display Value object to the form bean.
			if (isTokenValid(request)) {
				 FormFile file = null;
				// Get the upload File Path
				 file = (FormFile) tform.getObjTragetUploadFormFile();
				//To store the file to be uploaded in the specified location
				File fileToCreate = loadFile(file);				
				String uploadType=targetDTO.getSelectedUploadType();
				if(uploadType!=null && !uploadType.trim().equals("") && uploadType.trim().equals("0")){
				uploadType="xls";	
				}
				
				if(uploadType!=null && !uploadType.trim().equals("") && uploadType.trim().equals("xls")){
				targetDTO=this.readExcelData(tform, request, targetDTO);
				}
				else if(uploadType!=null && !uploadType.trim().equals("") && uploadType.trim().equals("csv")){
					targetDTO=this.readCSVData(tform, request, targetDTO);	
				}
				else{
					targetDTO=this.readExcelData(tform, request, targetDTO);
				}

				if(null!=targetDTO.getMessage() && !"".equals(targetDTO.getMessage())
						&& targetDTO.getMessage().equals("Upload process initiated successfully.")){
					//Reading from uploaded file
					
					TargetsBD  bd = new TargetsBD() ;
					int processId = 0;
					processId = bd.createImportProcessId(targetDTO) ;
					targetDTO.setProcessId(processId);
				
					tform.setObjTargetsDTO(targetDTO);
					LogUtil.info("processId:::::::" + processId);
					
					if (processId>0) {
						//LogUtil.debug("List:::::::" + objExcelDTO.getAlList()+";processId:::"+objExcelDTO.getProcessId());
						this.uploadTargetParam(targetDTO);
					}
				} 
				request.setAttribute("saveMsg",  targetDTO.getMessage());
					
				
				
				resetToken(request);
				saveToken(request);
			}
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "",
					IConstants.END_FOR_LOG);
		}catch (PSSException _ex) {
			_ex.printStackTrace();
				objActionErrors.add("Errors", new ActionError("error.PSS.GeneralException"));
				saveErrors(request, objActionErrors);
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "	+ _ex.getMessage());
				try {
					TabController objTabController = null;
					objTabController = new TabController();
					forwardPage = objTabController.forwardTabControlRequestData(
							request, mapping, "../jsp/pss/targetUpload.jsp",
							"../jsp/pss/targetUpload.jsp");
				} catch (Exception _expn) {
					_expn.printStackTrace();
				}
		} catch (Exception _exp) {
			objActionErrors.add("Errors", new ActionError("error.invalid.file.upload"));
			saveErrors(request, objActionErrors);
			
		} finally {
			try {
				this.getTargetUploadDashboard(mapping, tform, request, response);
				if (objInputStream != null) {
					objInputStream.close();
				}
				
			} catch (Exception _exp) {
				objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
						IConstants.GENERAL_EXCEPTION));
				saveErrors(request, objActionErrors);
			}
			//this.getfailedReportDashboard(mapping, form, request, response,module);
		}

		return forwardPage;
	}
	
	/**
	 * This method is used to read the data from the given excel sheet.
	 * 
	 * @param nEFTMasterForm
	 * @param request
	 * @return
	 */
	private final TargetsDTO readExcelData(TargetsUploadForm pform,
			HttpServletRequest request, TargetsDTO objTargetsDTO) {

		//UserContextVO objUserContextVO = null;
		InputStream objInputStream = null;
		FormFile file = null;
		ILogger LogUtil = LogManager.getInstance();
		
		final String STRMETHODNAME = "readExcelData:::";
		// Get the upload File Path
		try {
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "",IConstants.BEGIN_FOR_LOG);
			file = (FormFile) pform.getObjTragetUploadFormFile();
			//File csvfile =(File)pform.getObjFormFile();
			Workbook wb_XSSF; //Declare XSSF WorkBook 
			Workbook wb_HSSF; //Declare HSSF WorkBook 
			objInputStream = (InputStream) file.getInputStream();
			String fileExtn = getFileExtension(file.getFileName()); 
			//objUserContextVO = (UserContextVO) super.getUserContext(request);
			
			
			if (fileExtn.equalsIgnoreCase("xlsx")) 
			{ 
				//InputStream inp = new FileInputStream(file.getFileName());
				wb_XSSF = new HSSFWorkbook(file.getInputStream()); 
				objTargetsDTO = this.readTargetExcelData(wb_XSSF, objTargetsDTO);
				//sheet = wb_XSSF.getSheetAt(0); 
			}
			if (fileExtn.equalsIgnoreCase("xls")) 
			{ 
				POIFSFileSystem fs = new POIFSFileSystem(file.getInputStream()); 
				wb_HSSF = new HSSFWorkbook(fs); 
				objTargetsDTO = this.readTargetExcelData(wb_HSSF, objTargetsDTO);
				//sheet = wb_HSSF.getSheetAt(0); 
			} 
			
			ArrayList alist = objTargetsDTO.getUploadList();

				if (objInputStream != null) {
					objInputStream.close();
				}
				if (alist!=null && alist.size() > 0) {
					objTargetsDTO.setMessage("Upload process initiated successfully.");
				} else if(objTargetsDTO.getMessage()==null || objTargetsDTO.getMessage().length() == 0) {
					
					objTargetsDTO.setMessage("Invalid File is Uploaded");
				 
				}
			
			
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "",
					IConstants.END_FOR_LOG);
		}catch (FileNotFoundException e) {
			ActionErrors objActionErrors = new ActionErrors();
			objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					IConstants.FILE_NOT_FOUND));
			saveErrors(request, objActionErrors);
		} catch (IOException e) {
			e.printStackTrace();
			ActionErrors objActionErrors = new ActionErrors();
			objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					IConstants.GENERAL_EXCEPTION));
			saveErrors(request, objActionErrors);
		}catch (Exception _expn) {
			ActionErrors objActionErrors = new ActionErrors();
			objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					IConstants.GENERAL_EXCEPTION));
			saveErrors(request, objActionErrors);
		} finally {
			try {
				if (objInputStream != null) {
					objInputStream.close();
				}
			} catch (Exception _exp) {
				ActionErrors objActionErrors = new ActionErrors();
				objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
						IConstants.GENERAL_EXCEPTION));
				saveErrors(request, objActionErrors);
			}
		}
		return objTargetsDTO;
	}
	
	/**
	 * This method is used to store the file to be uploaded.
	 * 
	 * @param file
	 * @return file
	 * @throws FileNotFoundException
	 * @throws IOException
	 */
	private File loadFile(FormFile file)	throws FileNotFoundException, IOException {
		String serverFilePath = TPPConfig.getValue(IEnrollmentConstants.CONFIG_PATH_IMPORT);
		String sourceFileName = file.getFileName();
		String signedFileName = getFileNameToBeStore(sourceFileName);
		LogUtil.info("File uploaded in the path ::: " + serverFilePath+"/"+ signedFileName);
		
		File parent = new File(serverFilePath);
		if (!parent.exists()) {
			parent.mkdirs();
		}
		
		File fileToCreate = new File(serverFilePath, signedFileName);
		if(!fileToCreate.exists()){
			fileToCreate.createNewFile();
		}
		FileOutputStream fileOutStream = new FileOutputStream(fileToCreate);
		fileOutStream.write(file.getFileData());
		fileOutStream.flush();
		fileOutStream.close();
		return fileToCreate;
		}
	
	/**
	 * This method is udes to create the file to be downloaded.
	 * 
	 * @param sourceFileName
	 * @return
	 */
	private   String getFileNameToBeStore(String sourceFileName) {
				 SimpleDateFormat newdate = new SimpleDateFormat("ddMMyyyy");
		            SimpleDateFormat timeStamp = new SimpleDateFormat("HHmmss");
		            Date date = new Date();
		            String fileName = newdate.format(date)+timeStamp.format(date)+"";
				String postfix="";
				final String STRMETHODNAME = "::getFileNameToBeStore::";
				LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
				LogUtil.info("File uploaded in the path ::: " + fileName );
				if (null != sourceFileName && !sourceFileName.equals("")) {
					 postfix= sourceFileName.substring(sourceFileName.lastIndexOf('.'));
					 sourceFileName = sourceFileName.substring(0,sourceFileName.lastIndexOf('.'));
					 sourceFileName = sourceFileName + "_"+ fileName + postfix;
					 LogUtil.info("sourceFileName :::::::File uploaded in the path ::: " + sourceFileName );
				}
				LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
				return sourceFileName;
			}
	
	/**
	 * This method is used to get the extension of the given file.
	 * 
	 * @param String
	 * @return
	 */
	private static String getFileExtension(String fname) 
	{ 
		String fileName = fname; 
		String ext=""; 
		int mid= fileName.lastIndexOf("."); 
		ext=fileName.substring(mid+1,fileName.length()); 
		return ext; 
	}
	
	
	
	protected void setTabFilter(String actionNm,HttpServletRequest request){
		HashMap hmReqObj = new HashMap();
		HttpSession objHttpSession = request.getSession();
		
		String reqHidPar = UtilityManager.getDataByTableNm(TabConstants.TABMANGMT_PROP_TABLE,
				IConstants.REQ_HIDDEN_PARAM);
		hmReqObj.put(IConstants.REQUEST_ACTION, actionNm); 
		objHttpSession.setAttribute(reqHidPar, hmReqObj);
	}
	public TargetsDTO readTargetExcelData(Workbook objWorkbook,TargetsDTO objTargetsDTO)
			throws PSSException {

				final String STRMETHODNAME = "  readTargetExcelData::::  ";
				LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
				Sheet objSheet = null;
				TargetsBD targetsBD = new TargetsBD() ;
				TargetUploadDTO objUploadDTO = new TargetUploadDTO();
				ArrayList paramList = new ArrayList() ;
			try {

				if (objWorkbook != null) {

					// Retrive the Sheet objects attached to this workbook
					if( objWorkbook.getNumberOfSheets()>0)
						if (objWorkbook.getSheetAt(0).getLastRowNum() >= 0) {
							objSheet = objWorkbook.getSheetAt(0);
						}	
					/*for (int i = 0; i < objWorkbook.getNumberOfSheets(); i++) {
						if (objWorkbook.getSheetAt(i).getLastRowNum() >= 0) {
							objSheet = objWorkbook.getSheetAt(i);
						}

						break;
					}*/
					// Reading the Each row from Sheet
					Iterator objIterator = objSheet.rowIterator();
					ArrayList al = new ArrayList();
					ArrayList dtindex = new ArrayList();
					int rowcount = objSheet.getLastRowNum();
					int dataRange = 10000 ;
					boolean validExcelupload = true;
					if(rowcount < dataRange)
					{
							
						LogUtil.info("rowcount:::::" + rowcount);
						validExcelupload = true;
					}
					
					while (objIterator.hasNext()) {				
							Row objRow = (Row) objIterator.next();
							int rowNum = objRow.getRowNum();
							int noOfcells = objRow.getPhysicalNumberOfCells();
							
							boolean validRow = false ;
							// Reading the first row Column Names(Cell Names)
							if (rowNum == 0) {
								
								objUploadDTO.setTargetType(String.valueOf(objTargetsDTO.getTargetTypeId())) ;
								objUploadDTO.setTargetHdrId(String.valueOf(objTargetsDTO.getTargetDefHdrId())) ;
								objUploadDTO.setTargetEntity(String.valueOf(objTargetsDTO.getTargetEntity()));
								//objUploadDTO.setTargetDetId(String.valueOf(objTargetsDTO.getTargetEntity()));
								
								objUploadDTO = targetsBD.getHeadersList(objUploadDTO,objTargetsDTO);
								objTargetsDTO.setTargetDefDetId(Integer.parseInt(objUploadDTO.getTargetDetId()));
								paramList = objUploadDTO.getParamList() ;
								ArrayList headerLst = objUploadDTO.getHeaderList() ;
									
									if (objRow != null) {
										Iterator cellIterator = objRow.cellIterator();
										int headerCount = 0 ;
										int i=0;
										while (cellIterator.hasNext() && validExcelupload) {
											Cell cell = (Cell) cellIterator.next();
											if (null != cell) {
												String header = cell.getStringCellValue();
												header = (header != null) ? header.trim() : header;
												if (header!=null && !header.equals("") && headerLst!=null) {
													String headerVal = (String)headerLst.get(i) ;
													if(!header.equalsIgnoreCase(headerVal))	{
														validExcelupload = false;
														LogUtil.info(STRCLASSNAME, STRMETHODNAME, "   ", "HEADER VALUES are not correct");
														objTargetsDTO.setMessage("HEADER VALUES are not correct");
					
													}else{
														headerCount++;
														validExcelupload=true;
													}
													i++ ;
													/*//BZ#1322 Begin
													if(header.equalsIgnoreCase("COMMISSION CYCLE FROM DATE") 
															|| header.equalsIgnoreCase("COMMISSION CYCLE TO DATE")){
														dtindex.add(i);
													}//BZ#1322 Ends
*/												}
											}
										}
					
										if(headerCount!=headerLst.size()){
											validExcelupload = false ;
											LogUtil.info(STRCLASSNAME, STRMETHODNAME, "   ", "HEADER VALUES are not same in number");
											objTargetsDTO.setMessage("Header Values in the upload file are incorrect");
										}
									}
									if(!validExcelupload)
										objTargetsDTO.setMessage("Header Values in the upload file are incorrect");
									// Reading  Detail
								}
								if((rowNum == 1) && (validExcelupload)){
									if (objRow != null) {
										Iterator cellIterator = objRow.cellIterator();
										int i=0;
										
										while (cellIterator.hasNext() && validExcelupload) {
											Cell cell = (Cell) cellIterator.next();
											i++ ;
											int count;
											if(objTargetsDTO.getTargetTypeId() == 1)
												//Added For TA Partner Addition starts	
												if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("1")){
													count = 7 ;	
												}
												else if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("0")){
												count = 6 ;	
												}
												else{
													count = 9 ;	
												}
											//Added For TA Partner Addition ends
											else
												count = 9 ;
											if (null != cell && i>count ) {
												String header = cell.getStringCellValue();
												if(header!=null && !header.equalsIgnoreCase(objTargetsDTO.getUploadFor()))
													validExcelupload = false ;
											}
										}
									}
								}
								if ((rowNum > 1) && (validExcelupload)) {
									
									
									objUploadDTO = new TargetUploadDTO() ;
									ArrayList pList = new ArrayList() ;
									//int countParam = 0 ;
									for (int cell = 0; cell < objRow.getLastCellNum(); cell++) {
										String strcellValue = "";
										long intcellValue = 0;
										double doublecellValue = 0;
										Cell objCell = objRow.getCell((short) cell);
										
										
											if (null != objCell && validExcelupload) {
												int cellType = objCell.getCellType();
												switch (cellType) {
												case Cell.CELL_TYPE_STRING:
													strcellValue = objCell.getStringCellValue();
													break;

												case Cell.CELL_TYPE_NUMERIC:
													double doubleValue = objCell.getNumericCellValue();
													String stringValue = objCell.toString();
													if (!stringValue.contains(".")) {
														strcellValue = stringValue.toString();
													} else {
														long intValue = (long) doubleValue;
														if (intValue == doubleValue) {
															intcellValue = intValue;
															strcellValue = Long.toString(intcellValue);
														} else {
															doublecellValue = doubleValue;
															LogUtil.debug("doublecellValue"
																	+ doublecellValue);
														}
													}
													break;
												}
												strcellValue = strcellValue.trim();
												
												if(strcellValue!=null && strcellValue.length()>0){
														validRow = true ;
												
														if (objCell.getColumnIndex() == (short) 0) 
															objUploadDTO.setChannelName(strcellValue);
														
														if (objCell.getColumnIndex() == (short) 1) 
															objUploadDTO.setSubChannelName(strcellValue);
														
														if (objCell.getColumnIndex() == (short) 2) 
															objUploadDTO.setTargetTypeName(strcellValue);
														
														if (objCell.getColumnIndex() == (short) 3) 
															objUploadDTO.setEntityType(strcellValue) ;
														
														if(objTargetsDTO.getTargetTypeId() == 1){
															if(objTargetsDTO.getSelectedOrgType()!=null && !objTargetsDTO.getSelectedOrgType().trim().equals("")){
																if(objTargetsDTO.getSelectedOrgType().trim().equals("2")){	
																	if (objCell.getColumnIndex() == (short) 4) 
																		objUploadDTO.setPartnerType(strcellValue) ;	
																}
																else if(objTargetsDTO.getSelectedOrgType().trim().equals("1")){	
																	if (objCell.getColumnIndex() == (short) 4) 
																		objUploadDTO.setOrgName(strcellValue);	
																	if (objCell.getColumnIndex() == (short) 5) 
																		objUploadDTO.setIdentifierCode(strcellValue) ;//have to change here
																}	
															}
															if(objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){
																if (objCell.getColumnIndex() == (short) 5) 
																	objUploadDTO.setEntityName(strcellValue) ;	
																if(objTargetsDTO.getTargetEntity()!=0){
																	if (objCell.getColumnIndex() == (short) 6) 
																		objUploadDTO.setGeoUnitType(strcellValue) ;	
																}
																	if (objCell.getColumnIndex() == (short) 7) 
																	objUploadDTO.setOrgName(strcellValue) ;
																										
																	if (objCell.getColumnIndex() == (short) 8) 
																	objUploadDTO.setIdentifierCode(strcellValue) ;//have to change here
															}
															else if(objTargetsDTO.getSelectedTargetEntityType().trim().equals("1")){
																if (objCell.getColumnIndex() == (short) 5) 
																	objUploadDTO.setOrgName(strcellValue) ;
																										
																	if (objCell.getColumnIndex() == (short) 6) 
																	objUploadDTO.setIdentifierCode(strcellValue) ;//have to change here
															}
															//Added For TA Partner Addition ends
															
														}	
														else{
															
															if (objCell.getColumnIndex() == (short)4) 
																objUploadDTO.setHumanName(strcellValue) ;
															
															if (objCell.getColumnIndex() == (short)5) 
																objUploadDTO.setIdentifierCode(strcellValue) ;
															
															if (objCell.getColumnIndex() == (short)6) 
																objUploadDTO.setOrgName(strcellValue) ;
															
															if (objCell.getColumnIndex() == (short)7) 
																objUploadDTO.setOrgCode(strcellValue) ;
															
															if (objCell.getColumnIndex() == (short)8) 
																objUploadDTO.setAssignType(strcellValue) ;
															if (objCell.getColumnIndex() == (short)9) 
																objUploadDTO.setRatedBusinessPremium(strcellValue);
															
														}
														
															
													LogUtil.debug("strcellValue:::: " + strcellValue + ":::::::");
											}	
										    else {
										    	LogUtil.debug("empty cell at " + cell	+ ":::::::");
										    }
											if(objTargetsDTO.getTargetTypeId() == 1 && (objCell.getColumnIndex() > (short) 8) && (objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("2"))){
												if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("2")){		
													TargetUploadDTO param =new  TargetUploadDTO();
													CommonDTO dto = (CommonDTO)paramList.get(objCell.getColumnIndex()-9) ;
													param.setParameterName(dto.getId());
													param.setParameterValue(strcellValue);
													pList.add(param);
												}
													//countParam++ ;
											}
											else if((objTargetsDTO.getTargetTypeId() == 1 && (objCell.getColumnIndex() > (short) 6)) && (objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("1"))){
												if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("1")){
												TargetUploadDTO param =new  TargetUploadDTO();
												CommonDTO dto = (CommonDTO)paramList.get(objCell.getColumnIndex()-7) ;
												param.setParameterName(dto.getId());
												param.setParameterValue(strcellValue);
												pList.add(param);
												}
												//countParam++ ;
										}
											else if((objTargetsDTO.getTargetTypeId() == 1 && (objCell.getColumnIndex() > (short) 5)) && (objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("0"))){
												if(objTargetsDTO.getSelectedTargetEntityType()!=null && objTargetsDTO.getSelectedTargetEntityType().trim().equals("0")){
												TargetUploadDTO param =new  TargetUploadDTO();
												CommonDTO dto = (CommonDTO)paramList.get(objCell.getColumnIndex()-6) ;
												param.setParameterName(dto.getId());
												param.setParameterValue(strcellValue);
												pList.add(param);
												}
												//countParam++ ;
										}
											else if(objTargetsDTO.getTargetTypeId() == 2 && (objCell.getColumnIndex() > (short) 8)){
												
												TargetUploadDTO param =new  TargetUploadDTO();
												CommonDTO dto = (CommonDTO)paramList.get(objCell.getColumnIndex()-9) ;
												param.setParameterName(dto.getId());
												param.setParameterValue(strcellValue);
												pList.add(param);
												//countParam++ ;
											}		
									}
									
								}
								if(pList.size()>0)
									objUploadDTO.setParamList(pList) ;
							}
								if(validRow)
									al.add(objUploadDTO) ;
					}		
							LogUtil.debug("Number of records in the given file "+al.size());
							if(al.size()>0)
								objTargetsDTO.setUploadList(al);
							else if(objTargetsDTO.getMessage() ==null || (objTargetsDTO.getMessage()!=null && objTargetsDTO.getMessage()==""))
								objTargetsDTO.setMessage("Invalid Import File.") ;
							
							LogUtil.info(STRCLASSNAME, STRMETHODNAME, "",
									IConstants.END_FOR_LOG);	
						
							
							
					} 
				} catch (Exception _exp) {
					_exp.printStackTrace();
				}
				
				return objTargetsDTO;
				}
	
	public ActionForward uploadTargetParam(TargetsDTO objTargetDTO) throws PSSException  {
		final String STRMETHODNAME = "::uploadNumbers::";
		ActionForward forwardPage = new ActionForward();
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		InputStream objInputStream = null;
		try {

			//To start up a thread.
			TargetParameterUploadProcess objProcess = null;
			try {
				objProcess = new TargetParameterUploadProcess();
				objProcess.processUploadThread(objTargetDTO);
			} catch (Exception e) {
			}

			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "",IConstants.END_FOR_LOG);

		} catch (Exception _exp) {
			FWKLogManagerUtil.logErrorMessage(CLASS_NAME + ":::Exception  "
					+ _exp);
			throw new PSSException(_exp, IConstants.GENERAL_EXCEPTION, true);
		} finally {
			try {
				if (objInputStream != null) {
					objInputStream.close();
				}
			} catch (Exception _exp) {
				FWKLogManagerUtil.logErrorMessage(CLASS_NAME + ":::Exception  "
						+ _exp);
				throw new PSSException(_exp, IConstants.GENERAL_EXCEPTION, true);
			}
		}

		return forwardPage;
	}
	private void getTargetUploadDashboard(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {

		HashMap baseDBInfoMap = new HashMap();
		HashMap dynamicQueryDBInfoMap = new HashMap();
		HashMap newDBHashMap = new HashMap();
		HashMap otherDBInfoMap = new HashMap();
		HashMap hMapDBInfo = new HashMap();
		//String appendQuery = " and 1=1 ";
		final String STRMETHODNAME = "::getTargetUploadDashboard::";
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		try {
			UserContextVO objUserContextVO = (UserContextVO) super
					.getUserContext(request);
			
			TargetsDTO targetsDTO =null;
			TargetsUploadForm pform = (TargetsUploadForm)form;
			targetsDTO = pform.getObjTargetsDTO() ;
		
			baseDBInfoMap.put(IDBConstants.DASHBOARD_NAME_REQUEST_PARAMETER,
					 ITargetConstants.TARGET_UPLOAD_DASHBOARD);
			baseDBInfoMap.put(IDBConstants.ROLECD, objUserContextVO.getRoleId());
			hMapDBInfo.put(IDBConstants.BASE_DB_INFORMATION, baseDBInfoMap);
			
			hMapDBInfo.put(IDBConstants.DYNAMIC_QUERY_DB_INFORMATION,	dynamicQueryDBInfoMap);
			otherDBInfoMap.put(IDBConstants.IS_SHOW_SORT_IND, "N");
		 	
			/*if(targetsDTO.getChannelPartyId()!=0){
				appendQuery = appendQuery + " and tpuh.CHANNEL_PARTY_ID="+targetsDTO.getChannelPartyId();
			}
			if(targetsDTO.getSubChannelPartyId()!=0){
				appendQuery = appendQuery + " and tpuh.SUBCHANNEL_PARTY_ID="+targetsDTO.getSubChannelPartyId();
			}
			dynamicQueryDBInfoMap.put("###", appendQuery);
			*/ArrayList primaryKeys = new ArrayList();
			ArrayList alDisplayButtonAction = new ArrayList();

			primaryKeys.add("process_id");			
			primaryKeys.add("Error_Records");
			HttpSession session = request.getSession();
			otherDBInfoMap.put(IDBConstants.DISPLAY_TYPE,
					IDBConstants.DISPLAY_TYPE_RADIO);
			ArrayList alDisplayButtonValue = new ArrayList();
			alDisplayButtonValue.add(IEnrollmentConstants.DISPLAY_BUTTON_DOWNLOAD);
			alDisplayButtonAction.add(IEnrollmentConstants.FAILURE_REPORT_DOWNLOAD);
			otherDBInfoMap.put(IDBConstants.PRIMARY_KEYS, primaryKeys);
			otherDBInfoMap.put(IDBConstants.DISPLAY_BUTTON_ACTION,
					alDisplayButtonAction);
			otherDBInfoMap.put(IDBConstants.DISPLAY_BUTTON_VALUES,
					alDisplayButtonValue);
			hMapDBInfo.put(IDBConstants.OTHER_INFORMATION, otherDBInfoMap);
			newDBHashMap.put(ITargetConstants.TARGET_UPLOAD_DASHBOARD, hMapDBInfo);
			CommonUtilities.initDBContext(request, newDBHashMap);
			
			request.setAttribute(IDBConstants.DASHBOARD_NAME_REQUEST_PARAMETER,
					ITargetConstants.TARGET_UPLOAD_DASHBOARD);
			session.setAttribute(IDBConstants.DASHBOARD_NAME_REQUEST_PARAMETER,
					ITargetConstants.TARGET_UPLOAD_DASHBOARD);
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		} catch (Exception ex) {
			ActionErrors objActionErrors = new ActionErrors();
			objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					IConstants.GENERAL_EXCEPTION));
			saveErrors(request, objActionErrors);
		}
	}
	
	public ActionForward getFailedRecordDetails(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws PSSException {
		final String STRMETHODNAME = "::getFailedRecordDetails::";
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
		ActionForward forwardPage = null;
		TabController objTabController = null;
		UserContextVO objUserContextVO = null;
		String processId = "";
		ArrayList arrReportHeaders = null;
		HashMap hmapReportColumns = null;
		int errorCount=0;
		try {
			objTabController = new TabController();
			forwardPage = objTabController.forwardTabControlRequestData(
					request, mapping, "../jsp/pss/targetUpload.jsp",
					"../jsp/pss/targetUpload.jsp");
			objUserContextVO = (UserContextVO) super.getUserContext(request);
			// check for the session out
			if (null == objUserContextVO) {
				return mapping.findForward(IConstants.INVALID_SESSION); // Forward
				// to
				// login
				// page.
			} else {

				processId = request.getParameter("processId");
				LogUtil.info(STRCLASSNAME, STRMETHODNAME, "processId:::::",
						processId);
				TargetsBD bd = new TargetsBD();
				if(null!=processId && !"".equals(processId))
					errorCount=bd.getFailedRecordCount(processId);
				if(0!=errorCount){
				
				// Added for Exporting Start//
				arrReportHeaders = new ArrayList(); // Headers Shown in the Dashboard.This should be in the same order as present in the dynamic query
				arrReportHeaders.add("Process ID");
				arrReportHeaders.add("Record ID");
				arrReportHeaders.add("Error Message");
				arrReportHeaders.add("Details");

				hmapReportColumns = new HashMap(); // Database Column names whose alias names are shown in the dashboard and in the search criteria.

				hmapReportColumns.put("PROCESS_ID", "Process ID");
				hmapReportColumns.put("RECORD_ID", "Record ID");
				hmapReportColumns.put("ERROR_MESSAGE", "Error Message");
				hmapReportColumns.put("DETAILS", "Details");

				ReportsGenerator objReportsGenerator = new ReportsGenerator();
				 
				String strFileName = objReportsGenerator
//						.getFileName(IEnrollmentConstants.FILE_FORMATE_EXCEL);//For excel
						.getFileName(IEnrollmentConstants.FILE_FORMAT_CSV);//For CSV 
				objReportsGenerator.generateUploadErrorReport(arrReportHeaders,
						hmapReportColumns, processId, strFileName,
//						IEnrollmentConstants.FILE_FORMATE_EXCEL);
						IEnrollmentConstants.FILE_FORMAT_CSV); // For CSV files
//				String strFilePath = TPPConfig.getValue(IEnrollmentConstants.CONFIG_PATH_IMPORT);
				String strFilePath = TPPConfig.getValue(IEnrollmentConstants.CONFIG_PATH_IMPORT_CSV);				
				request.setAttribute("filename", strFileName);
				request.setAttribute("filePath", strFilePath);
				System.out.println("Downloading File: "+strFileName);
				 File file = new  File(strFilePath, strFileName);
				 FileInputStream fin = new  FileInputStream(file);
//				String fileType = IEnrollmentConstants.FILE_FORMATE_EXCEL;
				String fileType = IEnrollmentConstants.FILE_FORMAT_CSV;
				if (fileType != null && fileType.equalsIgnoreCase("1")){
					response.setContentType("application/vnd.ms-excel");
				} else if (fileType != null && fileType.equalsIgnoreCase("2") ){
					response.setContentType("application/binary");
//					response.setContentType("application/csv");
				} else  if(fileType != null && fileType.equalsIgnoreCase("3")){
					response.setContentType("application/xhtml+xml"); 
				} else   if(fileType != null && fileType.equalsIgnoreCase("4")){
					response.setContentType("text/html"); 
				} else {
					response.setContentType("application/pdf");
				}
				response.setHeader("Cache-Control", "");
				// For BZ#768
				response.setHeader("Content-Disposition", "attachment;filename="+strFileName);
				ServletOutputStream outStream = response.getOutputStream();
				int numBytes = 0;
				byte[] byteArray = new byte[512];
				while((numBytes = fin.read(byteArray)) != -1){
					outStream.write(byteArray,0,numBytes);
				}
				 fin.close();
				outStream.flush();
			    outStream.close(); 
				// Added for Exporting End//
			   // forwardPage = mapping.findForward("export");
			} else{
				ActionErrors objActionErrors = new ActionErrors();
				objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
				"error.no.error.records"));
				saveErrors(request, objActionErrors);
				forwardPage = mapping.findForward(IEnrollmentConstants.UPLOAD_ERROR_PAGE);
				 
			}
			
			}	 
		} catch (Exception ex) {
			ActionErrors objActionErrors = new ActionErrors();
			objActionErrors.add(ActionErrors.GLOBAL_ERROR, new ActionError(
					IConstants.GENERAL_EXCEPTION));
			saveErrors(request, objActionErrors);
		}  finally {
			 this.getTargetUploadDashboard(mapping, form, request, response);
		} 
		LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);
		return forwardPage;
	}
	//Added For TA Partner Addition starts
		public ActionForward searchPartyTypeEntity(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			String STRMETHODNAME = "::::::searchPartyTypeEntity::::::";
			
			TabController objTabController = null;		
			ActionErrors errors = new ActionErrors();		
			ActionForward forwardPage = null;
			HashMap hmReqObj = null;
			UserContextVO objUserContextVO = null;
			HttpSession session = null;
			PartyContextDTO objPartyContextDTO = null;
			String entityCode = null;
			TargetsUploadForm objTargetsForm = null;
			TargetsDTO objTargetsDTO = null;
			ArrayList frdTypList = null;
			String claimId = null,policyNum = null;
			String mode = null,pageMode = null,channelId=null;
			ArrayList channelList = new ArrayList();
			ArrayList subChannelList = new ArrayList();
			TargetsBD objTargetsBD = null;
			CommonBD objCommonBD=new CommonBD();
			try {
				LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", IConstants.BEGIN_FOR_LOG);
				saveToken(request);
				objTabController = new TabController();
				objTargetsBD = new TargetsBD();
				session = request.getSession();
				objUserContextVO = (UserContextVO) super.getUserContext(request);			
				objPartyContextDTO = super.getPartyContext(request);
				objTargetsForm = (TargetsUploadForm) form;
				objTargetsDTO = objTargetsForm.getObjTargetsDTO(); 
							
				if(objPartyContextDTO==null){
					objPartyContextDTO = new PartyContextDTO();
					objPartyContextDTO.setMode(IConstants.PSS_PARTYINSMODE);
					objPartyContextDTO.setUserContextVO(objUserContextVO);
					objPartyContextDTO.setWorkbasketid(0);
					objPartyContextDTO.setUserId(objUserContextVO.getUserId());
					objPartyContextDTO.setRoleCd(objUserContextVO.getRoleId());
					objPartyContextDTO.setUserId(objUserContextVO.getUserId());				
					super.setPartyContext(request, objPartyContextDTO);
				}
							
				//Getting Mode
				if(mode==null)
					mode = request.getParameter("mode");
				request.setAttribute("mode", mode);
				objPartyContextDTO.setMode(mode);
				
				pageMode = request.getParameter("pageMode");
				
				if(request.getParameter("id")!=null)
				{
					String id = (String) request.getParameter("id") ;
					objTargetsDTO.setTargetDefHdrId(Integer.valueOf(id));
				}			
				//Added For TA Partner Addition starts
				objTargetsDTO.setPartnerType(objCommonBD.getChannelPartnersList(objUserContextVO));
				//Added For TA Partner Addition ends

				objTargetsForm.setObjTargetsDTO(objTargetsDTO);
				if(request.getParameter("subChannelPartyId")!=null&& !(request.getParameter("subChannelPartyId").trim().equals(""))){
					request.setAttribute("subChannelPartyId", (String)request.getParameter("subChannelPartyId"));			
				}
				super.setPartyContext(request, objPartyContextDTO);
				getSearchDashboard(mapping, form, request, response);			
				forwardPage=mapping.findForward("searchUploadPartnerEntity");					
				
			} catch (Exception ex) {
				LogUtil.fatal(" Exception" + CLASS_NAME + STRMETHODNAME
						+ ex.getMessage());
				errors.add("Errors", new ActionError("error.PSS.GeneralException"));
				saveErrors(request, errors);
				return forwardPage;
			}
			finally{			
			}
			LogUtil.info("[Exited]" + CLASS_NAME + STRMETHODNAME);
			return forwardPage;
		}
		
		public ActionForward performSearch(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			final String STRMETHODNAME = "::performSearch::";
			LogUtil.debug(STRCLASSNAME + STRMETHODNAME + "Begin");
			ActionForward forwardPage = null;
			TabController objTabController = null;
			UserContextVO objUserContextVO = (UserContextVO) super.getUserContext(request);
			TargetsDTO objTargetsDTO=new TargetsDTO();			
			try {
				objTabController = new TabController();			
				forwardPage=mapping.findForward("searchUploadPartnerEntity");
				TargetsUploadForm objTargetsUploadForm = (TargetsUploadForm) form;
				if(request.getAttribute("subChannelPartyId")!=null&& !(((String)request.getAttribute("subChannelPartyId")).trim().equals(""))){
					request.setAttribute("subChannelPartyId", (String)request.getAttribute("subChannelPartyId"));
				}	
				request.setAttribute("isSearchSelected","true");
				getSearchDashboard(mapping, form, request, response);			
				request.setAttribute("Rolecode_desc", objUserContextVO.getRoleCodeDescription());
			} catch (Exception ex) {
				ex.printStackTrace();
				LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "", "Exception "
						+ ex.getMessage());
			}
			LogUtil.debug(STRCLASSNAME + STRMETHODNAME + "End::");
			return forwardPage;
		}
		
		private void getSearchDashboard(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			final String STRMETHODNAME = "::getSearchDashboard::";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " Begin ");

			HashMap baseDBInfoMap = new HashMap();
			HashMap dynamicQueryDBInfoMap = new HashMap();
			HashMap newDBHashMap = new HashMap();
			HashMap otherDBInfoMap = new HashMap();
			PartyContextDTO objPartyContextDTO = null;
			HashMap hMapDBInfo = new HashMap();		
			String appendQuery = " ";String partnerType = "";String subChannelId="";
			HttpSession objHttpSession = null;
			ArrayList alDisplayButtonValue = new ArrayList();
			ArrayList alDisplayButtonAction = new ArrayList();
			try {

				TargetsUploadForm geoHierarchySearchForm = (TargetsUploadForm) form;			
				objHttpSession = request.getSession();
				objPartyContextDTO = super.getPartyContext(request);
				UserContextVO objUserContextVO = (UserContextVO) super.getUserContext(request);
							
				String pathRef = objUserContextVO.getPathref();
				if(request.getParameter("partnertype")!=null){
					partnerType = request.getParameter("partnertype");		
				}
				if(request.getParameter("subChannelPartyId")!=null&& !(request.getParameter("subChannelPartyId").trim().equals(""))){
					subChannelId=request.getParameter("subChannelPartyId");	
				}
				if(request.getAttribute("subChannelPartyId")!=null&& !(((String)request.getAttribute("subChannelPartyId")).trim().equals(""))){
					subChannelId=(String) request.getAttribute("subChannelPartyId");
					request.setAttribute("subChannelPartyId", subChannelId);
				}
				if(subChannelId!=null && subChannelId.trim().equals("")){
					subChannelId=geoHierarchySearchForm.getObjTargetsDTO().getSubChannelPartyId()+"";
					request.setAttribute("subChannelPartyId", subChannelId);
				}
				int conditionCount = 0;
				String chanelAdminChanelPartyId = objUserContextVO.getChanelPartyId();		
				partnerType = partnerType.trim();
				if(partnerType==null){
					appendQuery = appendQuery + "and 1 = 1";
				}else{
					appendQuery = appendQuery
							+ " and apr.PARTY_ROLE_NM in ('" + partnerType
							+ "') and parentparty.party_id ="+subChannelId;	
				}
				
				LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "where condition::",
						appendQuery);

				baseDBInfoMap.put(IDBConstants.DASHBOARD_NAME_REQUEST_PARAMETER,
						IConstants.TA_PARTNER_SEARCH_DB);
				
				baseDBInfoMap.put(IDBConstants.ROLECD, "ALL");
				otherDBInfoMap.put(IDBConstants.IS_SHOW_SORT_IND,
						ICommonConstants.SHOW_SORT_IND_NO);
				otherDBInfoMap.put(IDBConstants.DISPLAY_TYPE,
						IDBConstants.DISPLAY_TYPE_RADIO);
				ArrayList primaryKeys = new ArrayList();
				primaryKeys.add(ICommonConstants.GEO_SEARCH_PARTY_ID);
				otherDBInfoMap.put(IDBConstants.PRIMARY_KEYS, primaryKeys);
			
				alDisplayButtonValue.add(ICommonConstants.TA_SEARCH_DASHBOARD_SELECT); // add
				alDisplayButtonAction.add(ICommonConstants.TA_SEARCH_DASHBOARD_SELECT_SCRIPT); // add update java script
				
				otherDBInfoMap.put(IDBConstants.DISPLAY_BUTTON_VALUES,
						alDisplayButtonValue);
				otherDBInfoMap.put(IDBConstants.DISPLAY_BUTTON_ACTION,
						alDisplayButtonAction);			
				dynamicQueryDBInfoMap.put("###", appendQuery);
				hMapDBInfo.put(IDBConstants.BASE_DB_INFORMATION, baseDBInfoMap);
				hMapDBInfo.put(IDBConstants.OTHER_INFORMATION, otherDBInfoMap);
				hMapDBInfo.put(IDBConstants.DYNAMIC_QUERY_DB_INFORMATION,
						dynamicQueryDBInfoMap);

				newDBHashMap.put(IConstants.TA_PARTNER_SEARCH_DB, hMapDBInfo);
				CommonUtilities.initDBContext(request, newDBHashMap);			
				request.setAttribute(IDBConstants.DASHBOARD_NAME_REQUEST_PARAMETER,
						IConstants.TA_PARTNER_SEARCH_DB);
				objHttpSession.setAttribute(
						IDBConstants.DASHBOARD_NAME_REQUEST_PARAMETER,
						IConstants.TA_PARTNER_SEARCH_DB);

			} catch (Exception ex) {

				ActionErrors objActionErrors = new ActionErrors();
				ActionError objActionError = new ActionError("UnknownErrorCode");
				objActionErrors.add("UnknownErrorCode", objActionError);
				saveErrors(request, objActionErrors);
			}
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", IConstants.END_FOR_LOG);

		}
		
		private final TargetsDTO readCSVData(TargetsUploadForm pform,
				HttpServletRequest request, TargetsDTO objTargetsDTO){
		
			final String STRMETHODNAME = "addTask";
			LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "", " Begin ");
			if(uploadTypeId > 0 && userContextVO != null && formFile !=null)
			{
				UploadControllerDAO objControllerDAO=null;
				UploadControllerTask taskInst = null;
				HashMap<String, Object> inputMap=null;
				HashMap<String, Object> responseMap=null;
				int fileSize=0;
				try
				{
					FormFile file=null;
					file = (FormFile) pform.getObjTragetUploadFormFile();
					objInputStream = (InputStream) file.getInputStream();
					String fileExtn = getFileExtension(file.getFileName()); 
					String fileName=  new File(formFile.getFileName()).getName();
					String fileExtension = fileName.substring(fileName.indexOf("."));
					StringBuffer newfileName = new StringBuffer(String.valueOf(uploadTypeId)).append("_").append(new Date().getTime()).append(fileExtension);
					final File rootFolder = null;
					rootFolder = new File(TPPConfig.getValue("UPLOAD_FILE_POOL_FOLDER"));
					StringBuffer filePath = new StringBuffer().append(rootFolder.getAbsoluteFile());
					filePath.append(File.separator).append(newfileName);
					File file = new File(filePath.toString());
					FileOutputStream fout = new FileOutputStream(file);
					fout.write(formFile.getFileData());
					fout.close();
					fileSize=(int) (file.length()/1024);
					fileSize=fileSize/1024;
				//	LogUtil.debug(STRCLASSNAME, STRMETHODNAME, "FileName::::::"+newfileName);
					//Get the class path for the upload type from configuration
					objControllerDAO = new UploadControllerDAO();
					HashMap<String, Object> objHashMap = objControllerDAO.fetchUplaodTypeDetails(uploadTypeId,layOutId);
					//LogUtil.info(STRCLASSNAME, STRMETHODNAME, "ClassPath::::::"+objHashMap.get("classPath"));
					if(objHashMap.get("classPath") !=null && !objHashMap.get("classPath").equals(""))
						taskInst = (UploadControllerTask)Class.forName(((String) objHashMap.get("classPath")).trim()).newInstance();
					else
						throw new UploadControllerException("Classpath is not available");
					taskInst.setUploadTypeId(uploadTypeId);
					taskInst.setUserContextVO((UserContextVO)userContextVO.clone());
					taskInst.setUploadFile(file);
					taskInst.setHeaderList((ArrayList<String>) objHashMap.get("headerList"));
					taskInst.setFormatType((String) objHashMap.get("formatType"));
					taskInst.setUploadTypeName((String) objHashMap.get("uploadTypeName"));
					taskInst.setUploadModuleType((String) objHashMap.get("uploadModuleType"));
					taskInst.setStatus(7);
					taskInst.setUploadFileName(file.getName());
					taskInst.setActualFileName(fileName);
					if(taskInst.getFormatType() !=null && !taskInst.getFormatType().equals(""))
					{
						if(taskInst.getFormatType().equalsIgnoreCase("Csv"))
						{
							if(objHashMap.get("COL_SEP_CHAR")!=null && !objHashMap.get("COL_SEP_CHAR").equals(""))
								taskInst.setCvsColSepChar(((String)objHashMap.get("COL_SEP_CHAR")).trim().charAt(0));
							else
								throw new UploadControllerException("Column seperator is not defined for csv file");
						}
					}else
						throw new UploadControllerException("Upload file type is not defined");
					//Calling Bre for uploadController
					Date currentDt = new Date() ;
					SimpleDateFormat simpleDateformat = new SimpleDateFormat("EEEE");
					inputMap=new HashMap<String, Object>();
					inputMap.put(UploadControllerConstants.IMPORT_TYP_ID, taskInst.getUploadTypeId());
					inputMap.put(UploadControllerConstants.IMPORT_TYP_NM, taskInst.getUploadTypeName());
					inputMap.put(UploadControllerConstants.IMPORT_ROLE_CD, userContextVO.getRoleCode());
					inputMap.put(UploadControllerConstants.IMPORT_USERID, Integer.parseInt(userContextVO.getUserId()));
					inputMap.put(UploadControllerConstants.IMPORT_MODULE_ID, objHashMap.get("MODULE_ID"));
					inputMap.put(UploadControllerConstants.IMPORT_FILE_TYPE, taskInst.getFormatType());
					inputMap.put(UploadControllerConstants.IMPORT_DATE,objHashMap.get("sysdate"));
					inputMap.put(UploadControllerConstants.IMPORT_DAY, simpleDateformat.format(currentDt));
					inputMap.put(UploadControllerConstants.IMPORT_TIME, objHashMap.get("systime"));
					inputMap.put(UploadControllerConstants.IMPORT_FILE_SIZE, fileSize);
					responseMap=objControllerDAO.callUploadCntrlBRE("UPCNTRPR", inputMap, userContextVO);
					if(responseMap !=null && responseMap.size()>0)
					{
						String allowImport=(String) responseMap.get("ALLOW_IMPORT");
						int maxRecordCount=(Integer) responseMap.get("MAX_RECORD_COUNT");
						LogUtil.info(STRCLASSNAME, STRMETHODNAME, "ProcessId::::::"+taskInst.getProcessId(),"maxRecordCount::"+maxRecordCount);
						allowImport="Y";
						if(allowImport !=null && allowImport.equalsIgnoreCase("Y"))
						{
							if(taskInst !=null)
								taskInst.setMaxRecordCounr(maxRecordCount);
							//Generating process ID
							if(taskInst !=null)
								taskInst=objControllerDAO.generateUploadProcess(taskInst,0,0);
							//taskInst.initialize(); //Commented for perfomance
							//LogUtil.info(STRCLASSNAME, STRMETHODNAME, "ProcessId::::::"+taskInst.getProcessId());
							try
							{
								// Update the status as Pooled
								if(taskInst !=null)
									objControllerDAO.updateUploadProcStattus(4, taskInst.getProcessId());
								UploadControllerTaskPool.getInstance().submit(taskInst);
							}
							catch(UploadControllerException ex)
							{
								// Update the status as Aborted
								if(taskInst !=null && taskInst.getProcessId()>0)
								{
									objControllerDAO.updateUploadProcStattus(5, taskInst.getProcessId());
									LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "ProcessId::"+taskInst.getProcessId(), "UploadControllerException"+ex.getMessage());
								}
								throw ex;
							}
						}else
							throw new UploadControllerException("Upload is not allowed due to the failure of peakhours/Working Days/File Size parameter");
					}
				}
				catch(UploadControllerException ex)
				{
					LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "ProcessId::", "UploadControllerException"+ex.getMessage());
					if(ex.getMessage().contains("Exception"))
						throw new UploadControllerException("Internal Error occurred while processing the request. Please retry.");
					else
						throw (ex);
				}
				catch(Exception ex)
				{
					// Update the status as Failed
					if(taskInst !=null && taskInst.getProcessId()>0){
						objControllerDAO.updateUploadProcStattus(8, taskInst.getProcessId());
						LogUtil.fatal(STRCLASSNAME, STRMETHODNAME, "ProcessId::"+taskInst.getProcessId(), "UploadControllerException"+ex.getMessage());
					}
					throw new UploadControllerException("Internal Error occurred while processing the request. Please retry.");
				}
			}
			else
				throw new UploadControllerException("Invalid Task Information.");
			LogUtil.info(STRCLASSNAME, STRMETHODNAME, "", "End");
			}
		//Added For TA Partner Addition ends
	
}
